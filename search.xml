<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java位运算，Int类型存储用户的登录足迹</title>
    <url>/2021/08/23/Java%E4%BD%8D%E8%BF%90%E7%AE%97%EF%BC%8CInt%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8%E7%94%A8%E6%88%B7%E7%9A%84%E7%99%BB%E5%BD%95%E8%B6%B3%E8%BF%B9/</url>
    <content><![CDATA[<blockquote>
<p>今天接到一家公司的面试邀请，于是我来到了这家公司，前台的小姐姐面带微笑地把我请进会议室，等待了一会，一位面试官走了进来……</p>
<p>在进行了简单的自我介绍之后，面试官开始发问了……</p>
</blockquote>
<span id="more"></span>



<p>面试官：你好，请你使用最少的存储空间，记录一个用户在一个月内的登录记录，只需要知道用户在某一日是否登录即可。</p>
<p>我（略作沉思）：好的，我们可以建立一张登录日志表，在用户登录的时候，记录一条登录日志数据，这张表和用户表是一对多的关系，有用户主键、登录类型、登录时间等等，如果有需要，我们还可以记录用户的登录 IP、登录国家、城市等等信息……</p>
<p>面试官（面无表情）：……好的，请你回去等我们的通知吧……</p>
<p>我：……开玩笑的，既然要使用最少的存储空间来实现这个需求，使用传统的数据库记录登录日志的方式自然是难以达到这个条件的，所以我们需要打破传统的存储方式来实现这个需求。</p>
<p>面试官（略有兴趣）：哦，那你要怎么实现呢？</p>
<p>我：总所周知，在 Java 中，一个 int 类型所占的内存空间是 4 个字节，而一个字节是 8 个 bit，所以一个 int 类型的数据，所占用的内存空间是 32 个 bit 位，而我的想法就是，使用一个 int 类型的数据，也就是 32 个 bit 位记录用户在一个月内的登录记录。</p>
<p>面试官（点了点头）：32 个 bit 位，这个存储空间确实非常少，但是具体要怎么实现呢？你详细说说。</p>
<p>我：我之前也说了，一个 int 类型的数据，占用的内存空间是 32 个 bit 位，而 Java 中的 int 是一个有符号位的数据，除去最高位的符号位之外，在 Java 中一个 int 类型的数据，能够表达状态的一共有 31 个 bit 位。例如，一个值为 0 的 int 类型数据，转换为二进制的 bit 位，显示为 <code>00000000 00000000 00000000 00000000</code>。</p>
<p>面试官满意地点了点头……</p>
<p>我：一个 int 类型的 bit 为可以有 0 和 1 两个状态，而且恰好有 31 个 bit 位可用，我们完全可以使用这 31 个 bit 位来记录用户当日是否登录。比如一个用户在 3 号登录了，使用 bit 位表示为： <code>00000000 00000000 00000000 00000100</code> 。而后这个用户在 5 号也登录，使用 bit 位可以表示为： <code>00000000 00000000 00000000 00010100</code> 。依次类推，一个月最多也就 31 天，假如一个用户在一个大月中每天都登录，使用 bit 位可以表示为： <code>01111111 11111111 11111111 11111111</code> 。最后，我们将这个二进制的 bit 数据转换为 int 类型即可。</p>
<p>面试官：思路不错，但是具体要怎么实现呢？如果将一个 int 类型的数据转换为二进制的 bit 位数据，具体的算法实现会不会非常麻烦呢？程序的执行效率会不会很慢呢？</p>
<p>我（面带自信）：我的实现很简单，而且程序的执行效率也非常快，甚至要比 Java 中的其他运算都要快！</p>
<p>面试官：哦……</p>
<p>我：我的实现方式，就是使用 Java 中的位运算来实现，使用位运算，不仅实现简单，而且运行效率远比其他符号运算快！</p>
<p>面试官（递过来一张纸）：请你在草稿纸上简单实现一下吧。</p>
<p>我：……</p>
<p>我：首先定义一个私有的 int 类型的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">login</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>



<p>我：其次，我们需要两个公有的方法，用来操作这个 int 类型的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setBit</span><span class="params">(<span class="type">int</span> bitIndex)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span> || bitIndex &gt; <span class="number">30</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;超过 int 类型 bit 位的有效范围&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    login |= <span class="number">1</span> &lt;&lt; bitIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">getBit</span><span class="params">(<span class="type">int</span> bitIndex)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span> || bitIndex &gt; <span class="number">30</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;超过 int 类型 bit 位的有效范围&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (login &amp; <span class="number">1</span> &lt;&lt; bitIndex) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我：最后，我们可以测试一下这个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    setBit(<span class="number">0</span>);</span><br><span class="line">    setBit(<span class="number">3</span>);</span><br><span class="line">    setBit(<span class="number">4</span>);</span><br><span class="line">    setBit(<span class="number">16</span>);</span><br><span class="line">    setBit(<span class="number">30</span>);</span><br><span class="line">    System.out.println(Integer.toBinaryString(login));  <span class="comment">// 1000000 00000001 00000000 00011001</span></span><br><span class="line">    System.out.println(getBit(<span class="number">0</span>));   <span class="comment">// true</span></span><br><span class="line">    System.out.println(getBit(<span class="number">1</span>));   <span class="comment">// false</span></span><br><span class="line">    System.out.println(getBit(<span class="number">2</span>));   <span class="comment">// false</span></span><br><span class="line">    System.out.println(getBit(<span class="number">3</span>));   <span class="comment">// true</span></span><br><span class="line">    System.out.println(getBit(<span class="number">30</span>));  <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我：在这段代码中，我没有对日期进行一个真实数据的维护，比如 1 号对应的是 0 位的 bit 位，31 号对应的是 30 位的 bit 位，所以在正式使用的时候，需要手动对真实的日期数据进行 -1 维护。</p>
<p>面试官（面露微笑）：精彩！精彩啊！很好，我们公司就需要你这也的人才，明天来我们公司报道吧！</p>
<p>我（激动）：好的，请问我的薪资是……</p>
<p>面试官（沉吟片刻）：就 3k 吧。</p>
<p>我：……&amp;#￥$@@*&amp;^%……</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ProtoBuf入门</title>
    <url>/2022/02/14/ProtoBuf%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="什么是-ProtoBuf"><a href="#什么是-ProtoBuf" class="headerlink" title="什么是 ProtoBuf"></a>什么是 ProtoBuf</h2><p><code>protocol buffers</code> 是一种语言无关、平台无关、可扩展的序列化结构数据的方法，它可用于（数据）通信协议、数据存储等。</p>
<p><code>Protocol Buffers</code> 是一种灵活，高效，自动化机制的结构数据序列化方法－可类比 <code>XML</code>，但是比 <code>XML</code>更小（3 ~ 10倍）、更快（20 ~ 100倍）、更为简单。</p>
<p>你可以定义数据的结构，然后使用特殊生成的源代码轻松的在各种数据流中使用各种语言进行编写和读取结构数据。你甚至可以更新数据结构，而不破坏由旧数据结构编译的已部署程序。</p>
<span id="more"></span>

<blockquote>
<p><code>ProtoBuf</code> 是一种结构数据序列化的方法，类似于 <code>XML</code>、<code>Json</code> 等数据序列化格式，具有语言无关、平台无关、可扩展、灵活高效等特点。</p>
</blockquote>
<h2 id="怎么使用-ProtoBuf"><a href="#怎么使用-ProtoBuf" class="headerlink" title="怎么使用 ProtoBuf"></a>怎么使用 ProtoBuf</h2><h3 id="下载-protoc-编译器"><a href="#下载-protoc-编译器" class="headerlink" title="下载 protoc 编译器"></a>下载 protoc 编译器</h3><p>在使用 <code>ProtoBuf</code> 之前，需要先下载 <code>ProtoBuf</code> 编译器</p>
<p><strong>下载地址：</strong><a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a></p>
<p><img src="/images/2023/02/300001.png" alt=""></p>
<p>下载之后将压缩包放置到工作目录下，并解压到当前文件夹，将 <code>bin</code> 目录下的 <code>protoc</code> 可执行文件复制到工作目录下即可。</p>
<h3 id="定义数据结构"><a href="#定义数据结构" class="headerlink" title="定义数据结构"></a>定义数据结构</h3><p><code>ProtoBuf</code> 使用 <code>.proto</code> 文件来进行数据结构的定义。</p>
<p>在 <code>protoc</code> 可执行文件的同级别目录下创建一个 <code>.proto</code> 文件，并在文件中定义数据结构。</p>
<p>例如：编写一个 <code>user.proto</code> 文件</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> user;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译生成的Java可读写文件是否多文件生成</span></span><br><span class="line"><span class="keyword">option</span> java_multiple_files = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 编译生成的Java文件的目录，该目录可以由protoc编译器自动生成</span></span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">&quot;com.herenpeng.proto&quot;</span>;</span><br><span class="line"><span class="comment">// 编译生成的Java可读写文件名称，最终Java文件路径为 com.herenpeng.proto.UserProto</span></span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;UserProto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个User数据结构</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="type">int32</span> id = <span class="number">1</span>;     <span class="comment">// 定义一个int32类型的id属性</span></span><br><span class="line">  <span class="type">string</span> name = <span class="number">2</span>;  <span class="comment">// 定义一个string类型的name属性</span></span><br><span class="line">  <span class="type">string</span> email = <span class="number">3</span>; <span class="comment">// 定义一个string类型的email属性</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个枚举类型</span></span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">PhoneType</span> &#123;</span><br><span class="line">    MOBILE = <span class="number">0</span>;</span><br><span class="line">    HOME = <span class="number">1</span>;</span><br><span class="line">    WORK = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个手机号数据结构</span></span><br><span class="line">  <span class="keyword">message </span><span class="title class_">PhoneNumber</span> &#123;</span><br><span class="line">    <span class="type">string</span> number = <span class="number">1</span>;</span><br><span class="line">    PhoneType type = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个PhoneNumber集合类型的phones属性</span></span><br><span class="line">  <span class="keyword">repeated</span> PhoneNumber phones = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="protoc-编译可以读写的接口文件"><a href="#protoc-编译可以读写的接口文件" class="headerlink" title="protoc 编译可以读写的接口文件"></a>protoc 编译可以读写的接口文件</h3><p>进入当前工作目录下的命令行界面，直接 <code>protoc</code> 编译命令，即可生成 <code>ProtoBuf</code> 可读写的Java接口文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">protoc ./user.proto --java_out=./</span><br></pre></td></tr></table></figure>



<ul>
<li>第一个参数：<code>protoc</code> 编译器可编译的 <code>.proto</code> 文件的路径。</li>
<li>第二个参数 <code>--java_out=</code>：为 <code>protoc</code> 编译器编译之后，生成的 <code>Java</code> 可读写文件的路径。（该路径需要手动创建，<code>protoc</code>无法自动创建）</li>
</ul>
<blockquote>
<p>如果在开发中需要频繁进行编译生成工作，可以考虑将命令写成一个 <code>.bat</code> 或<code>.sh</code>脚本，将输出如今直接指向项目中的包路径。如果编译输出的路径不是在项目的包下，则需要自己手动将编译生成的接口文件复制到项目对应的目录下。</p>
</blockquote>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">protoc ./*.proto --java_out=../src/main/java</span><br></pre></td></tr></table></figure>



<h3 id="引入-ProtoBuf-依赖"><a href="#引入-ProtoBuf-依赖" class="headerlink" title="引入 ProtoBuf 依赖"></a>引入 ProtoBuf 依赖</h3><p>在项目中使用 <code>ProtoBuf</code> ，需要引入 <code>ProtoBuf</code>相关的依赖。</p>
<p>在引入依赖的时候需要注意一点，引入的 <code>ProtoBuf</code> 依赖的版本尽量与 <code>protoc</code> 编译器的版本保持一致，如果版本不同，可能会出现一些不兼容的情况。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.19.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="调用接口序列化数据"><a href="#调用接口序列化数据" class="headerlink" title="调用接口序列化数据"></a>调用接口序列化数据</h3><p><code>ProtoBuf</code>可以调用 <code>Builder</code> 接口进行属性设置，属性设置完成之后则使用 <code>build()</code> 方法进行数据构造，最后使用 <code>toByteArray()</code> 生成字节数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserProto.User.<span class="type">Builder</span> <span class="variable">user</span> <span class="operator">=</span> UserProto.User.newBuilder();</span><br><span class="line">user.setId(<span class="number">1</span>);</span><br><span class="line">user.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">user.setEmail(<span class="string">&quot;xiaoming@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">UserProto.User.PhoneNumber.<span class="type">Builder</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> UserProto.User.PhoneNumber.newBuilder();</span><br><span class="line">phoneNumber.setNumber(<span class="string">&quot;18478524512&quot;</span>);</span><br><span class="line">phoneNumber.setType(UserProto.User.PhoneType.HOME);</span><br><span class="line">user.addPhones(phoneNumber);</span><br><span class="line"></span><br><span class="line">System.out.println(user.build());</span><br><span class="line">System.out.println(Arrays.toString(user.build().toByteArray()));</span><br></pre></td></tr></table></figure>



<h2 id="ProtoBuf-的优缺点"><a href="#ProtoBuf-的优缺点" class="headerlink" title="ProtoBuf 的优缺点"></a>ProtoBuf 的优缺点</h2><p><code>ProtoBuf</code>与 <code>XML</code>、<code>Json</code>都是序列化数据的方式，但是这三者直接还是有一些差异的，所使用的场景也各不相同。</p>
<ul>
<li><p><code>ProtoBuf</code> 更加注重效率，序列化之后是字节数组，数据更小、传输速率更快，但是人类可读性差。</p>
</li>
<li><p><code>XML</code> 和 <code>Json</code> 序列化之后的数据人类可读性强。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>ProtoBuf</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基本数据类型</title>
    <url>/2021/11/21/Python%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>Python 有多种基本数据类型，用来存储内存中的数据。Python 一共提供了三种基本数据类型，其中分为是：数值型、字符型、布尔型。</p>
</blockquote>
<span id="more"></span>

<h2 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h2><blockquote>
<p>数值型就是用来存储数字的类型，例如一个人的年龄，身高，体重，一家公司的年度营收，员工总数等等。</p>
</blockquote>
<p>在 Python 中，提供了数字类型来保存这些数据，并且这些数值类型是不可改变的数据类型。如果需要修改数字类型变量的值，那么会先把该值放入内存中，然后修改变量让其指向新的内存地址。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))</span><br><span class="line">a = <span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">140718916818880</span></span><br><span class="line"><span class="number">140718916818880</span></span><br><span class="line"><span class="number">140718916818944</span></span><br><span class="line"><span class="number">140718916818880</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：在 Python 语言中，可以使用内置的函数 <code>id()</code> 来获取变量所指向的内存地址。</p>
</blockquote>
<p>a 与 b 虽然是不同的变量，但是他们的值都是相同的，所以它们在内存中的地址也是相同的，而当改变变量 a 的值的时候，并不是直接改变变量 a 的值，而是改变了变量 a 所指向的内存地址。</p>
<p>在 Python 语言中，数值类型主要包括整数、浮点数和复数。</p>
<h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><blockquote>
<p>整数就是整数数值，是没有小数部分的数值，例如：0、3、10、-1 等等。整数包括正整数、负数和0。Python 中的整数会自动转换高精度计算，所以 Python 中的整数类型的位数是任意的。</p>
</blockquote>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">123456</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">c = -<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">d = <span class="number">25465486413516513542315452153423134654134531</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">123456</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="number">25465486413516513542315452153423134654134531</span></span><br></pre></td></tr></table></figure>



<p>值得一提的是，Python 中的整数类型，如果是十进制整数，除了0之外，其他数值不能以0作为开头。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="number">000000000</span></span><br><span class="line"><span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = 000023</span><br><span class="line"><span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure>

<p>运行结果：报错</p>
<p>Python 中的整数除了十进制类型外，还有八进制、十六进制、二进制等等，在这里不过多讲解。</p>
<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><blockquote>
<p>浮点数主要由整数部分和小数部分组成，主要用于处理包括小数的数值。例如：3.1415926、-152.01、0.0001 等。</p>
</blockquote>
<p>在使用浮点数计算的时候，可能会出现小数位数不确定的情况。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0.1</span> + <span class="number">0.1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = <span class="number">0.1</span> + <span class="number">0.2</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0.2</span></span><br><span class="line"><span class="number">0.30000000000000004</span></span><br></pre></td></tr></table></figure>

<p>这是因为浮点数值在内存中保存方法导致的，基本上所有的计算机语言都存在这个问题，我们这里直接忽略多余的小数位即可。</p>
<h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><blockquote>
<p>Python 中的复数与数学中的复数的表现形式完全一致，都是有实数和虚数构成，并且使用 <code>j</code> 或 <code>J</code> 表示虚部。</p>
</blockquote>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">6.54</span> + <span class="number">32.01j</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">6.54</span>+<span class="number">32.01j</span>)</span><br></pre></td></tr></table></figure>



<h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><blockquote>
<p>字符串就是连续的字符组成的，通常使用 单引号<code>&#39;&#39;</code>、双引号<code>&quot;&quot;</code>、三引号<code>&#39;&#39;&#39;&#39;&#39;&#39;</code>或者 <code>&quot;&quot;&quot;&quot;&quot;&quot;</code>包裹起来。</p>
</blockquote>
<p>这三种类在 Python 中，字符串和整数一样，也属于不可变序列。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;字符串类型&quot;</span></span><br><span class="line">b = <span class="string">&quot;字符串类型&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))</span><br><span class="line">a = <span class="string">&quot;字符串类型2&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1357027606320</span></span><br><span class="line"><span class="number">1357027606320</span></span><br><span class="line"><span class="number">1357027224800</span></span><br><span class="line"><span class="number">1357027606320</span></span><br></pre></td></tr></table></figure>



<p>在 Python 中，单引号和双引号的字符串都只能在同一行，而三引号的字符串可以多行书写。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;单引号字符串&#x27;</span></span><br><span class="line">b = <span class="string">&quot;双引号字符串&quot;</span></span><br><span class="line">c = <span class="string">&#x27;&#x27;&#x27;三引号字符串</span></span><br><span class="line"><span class="string">    可以多行展示</span></span><br><span class="line"><span class="string">    |————————|</span></span><br><span class="line"><span class="string">    |        |</span></span><br><span class="line"><span class="string">    |--------|</span></span><br><span class="line"><span class="string">    结束&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">单引号字符串</span><br><span class="line">双引号字符串</span><br><span class="line">三引号字符串</span><br><span class="line">    可以多行展示</span><br><span class="line">    |————————|</span><br><span class="line">    |        |</span><br><span class="line">    |--------|</span><br><span class="line">    结束</span><br></pre></td></tr></table></figure>



<p>在 Python 中，存在转义字符，所谓转义字符，是指使用反斜杠 <code>\</code> 对一些特殊字符进行转义。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># \n 换行符</span></span><br><span class="line">a = <span class="string">&quot;Python\n字符串a&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># \0 空</span></span><br><span class="line">b = <span class="string">&quot;Python\0字符串b&quot;</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># \t 水平制表符</span></span><br><span class="line">c = <span class="string">&quot;Python\t字符串c&quot;</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># \&quot; 双引号</span></span><br><span class="line">d = <span class="string">&quot;Python\&quot;字符串d&quot;</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># \&#x27; 单引号</span></span><br><span class="line">e = <span class="string">&#x27;Python\&#x27;字符串e&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment"># \\ 反斜杠</span></span><br><span class="line">f = <span class="string">&quot;Python\\字符串f&quot;</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="comment"># \f 换页</span></span><br><span class="line">j = <span class="string">&quot;Python\f字符串j&quot;</span></span><br><span class="line"><span class="built_in">print</span>(j)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python</span><br><span class="line">字符串a</span><br><span class="line">Python 字符串b</span><br><span class="line">Python	字符串c</span><br><span class="line">Python<span class="string">&quot;字符串d</span></span><br><span class="line"><span class="string">Python&#x27;字符串e</span></span><br><span class="line"><span class="string">Python\字符串f</span></span><br><span class="line"><span class="string">Python字符串j</span></span><br></pre></td></tr></table></figure>



<p>除了这些转义字符外，还有其他一些不常用的转义字符，在这里不过多讲述。</p>
<p>值得一提的是，在 Python 中，在字符串定界符引前加上字母<code>r</code>（或者R），即可原样输出字符串。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">r&quot;Python\n字符串a&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python\n字符串a</span><br></pre></td></tr></table></figure>





<h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><blockquote>
<p>布尔类型主要表示为真值或者假值，在 Python 中，<code>Treu</code> 和 <code>False</code> 都解释为布尔类型。</p>
</blockquote>
<p>Python 中的布尔类型可以解释为数值类型进行计算，<code>True</code> 解释为 1，<code>False</code> 解释为 0。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="literal">True</span> +  <span class="number">1</span></span><br><span class="line">b = <span class="literal">False</span> + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>



<p>在 Python 中，所有的对象都可以真值测试，其中，以下几种情况可以被判定为 <code>False</code>，其他情况则为 <code>True</code>。</p>
<ul>
<li><code>False</code> 或 <code>None</code>。</li>
<li>数值中的0，包括0、0.0、虚数0。</li>
<li>空序列，包括空字符串、空元组、空列表、空字典。</li>
<li>自定义的对象，该对象的<code>__bool__</code>  方法返回 <code>False</code>，或者 <code>__len__</code> 方法返回0。</li>
</ul>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>在 Python 中，可以使用 Python 的内置函数，将一些类型的数据转换为另外一种类型。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>(a)))</span><br><span class="line"></span><br><span class="line">b = <span class="string">&quot;100&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">int</span>(b)))</span><br></pre></td></tr></table></figure>



<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>



<p>常用的类型转换函数有：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>int(x)</td>
<td>将x转换为整数类型</td>
</tr>
<tr>
<td>float(x)</td>
<td>将x转换为浮点数类型</td>
</tr>
<tr>
<td>complex(real [,imag])</td>
<td>创建一个复数</td>
</tr>
<tr>
<td>str(x)</td>
<td>将x转换为字符串类型</td>
</tr>
<tr>
<td>repr(x)</td>
<td>将x转换为表达式字符串</td>
</tr>
<tr>
<td>eval(x)</td>
<td>计算在字符串中的有效 Python 表达式，并返回一个对象</td>
</tr>
<tr>
<td>chr(x)</td>
<td>将整数x转换为一个字符</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python序列</title>
    <url>/2021/11/29/Python%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<blockquote>
<p>序列是一块用于存放多个值的连续的内存空间，并按照一定的顺序排列，每一个值（称为元素）都分配一个数字（称为索引或者位置）。通过索引可以取出对应位置的值。</p>
</blockquote>
<span id="more"></span>

<h1 id="序列的通用操作"><a href="#序列的通用操作" class="headerlink" title="序列的通用操作"></a>序列的通用操作</h1><p>在 Python 中，序列的主要结构有列表、元组、集合、字典和字符串。对于这些序列有一些通用操作，例如索引，切片，相加，相乘，序列长度，是否包含某个元素，序列最大值，序列最小值等等，其中集合和字典不支持索引、切片、相加、相乘操作。</p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p> 序列中的每一个元素都有一个编号，也称之为索引。序列从左往右开始数，第一个元素的索引是0，第二个元素的索引是1，以此类推。</p>
<p>值得一提的是，Python 的索引可以是负数，从右往左数，第一个元素的索引是-1，第二个元素的索引是-2，以此类推。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = [<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(arr[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(arr[-<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第一个元素</span><br><span class="line">第二个元素</span><br><span class="line">第四个元素</span><br><span class="line">第三个元素</span><br></pre></td></tr></table></figure>



<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片操作是访问序列中元素的一种方法，可以用于访问序列中指定范围的元素，通过切片操作生成一个新的序列。</p>
<p>切片操作的语法为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name[start : end : step]</span><br></pre></td></tr></table></figure>



<ul>
<li>name 为序列名称</li>
<li>start 为切片开始的索引，如果不指定，默认为0</li>
<li>end 为切片结束的索引 + 1，如果不指定，默认为序列的长度</li>
<li>step 为切片的步长，如果不指定，默认为1</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">arr = <span class="selector-attr">[<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(arr[<span class="number">1</span>:<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(arr[<span class="number">0</span>:<span class="number">2</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(arr[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(arr[:])</span></span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;第二个元素&#x27;</span>, <span class="string">&#x27;第三个元素&#x27;</span>, <span class="string">&#x27;第四个元素&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;第一个元素&#x27;</span>, <span class="string">&#x27;第二个元素&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;第二个元素&#x27;</span>, <span class="string">&#x27;第四个元素&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;第一个元素&#x27;</span>, <span class="string">&#x27;第二个元素&#x27;</span>, <span class="string">&#x27;第三个元素&#x27;</span>, <span class="string">&#x27;第四个元素&#x27;</span>]</span><br></pre></td></tr></table></figure>





<h2 id="序列相加"><a href="#序列相加" class="headerlink" title="序列相加"></a>序列相加</h2><p>在 Python 中，同类型的序列支持相加操作，相加之后的序列元素是原来两个序列的元素组合在一起，重复的元素不会去重，可以直接使用 + 运算符实现。</p>
<p>Python相加只支持同类型的序列，比如列表+列表，不支持列表+元组的操作。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">arr1 = <span class="selector-attr">[<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>]</span></span><br><span class="line">arr2 = <span class="selector-attr">[<span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(arr1 + arr2)</span></span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;第一个元素&#x27;</span>, <span class="string">&#x27;第二个元素&#x27;</span>, <span class="string">&#x27;第三个元素&#x27;</span>, <span class="string">&#x27;第四个元素&#x27;</span>]</span><br></pre></td></tr></table></figure>





<h2 id="序列相乘"><a href="#序列相乘" class="headerlink" title="序列相乘"></a>序列相乘</h2><p>序列相乘的操作和序列相加的操作结果类似，相乘是将原来的序列元素乘以倍数，相当于倍数个序列相加。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">arr = <span class="selector-attr">[<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(arr * <span class="number">3</span>)</span></span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;第一个元素&#x27;</span>, <span class="string">&#x27;第二个元素&#x27;</span>, <span class="string">&#x27;第一个元素&#x27;</span>, <span class="string">&#x27;第二个元素&#x27;</span>, <span class="string">&#x27;第一个元素&#x27;</span>, <span class="string">&#x27;第二个元素&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="序列长度"><a href="#序列长度" class="headerlink" title="序列长度"></a>序列长度</h2><p>Python 提供了内置的函数计算序列的长度。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">arr = <span class="selector-attr">[<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;序列长度：&quot;</span>, len(arr)</span></span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">序列长度： <span class="number">4</span></span><br></pre></td></tr></table></figure>



<h2 id="是否包含某个元素"><a href="#是否包含某个元素" class="headerlink" title="是否包含某个元素"></a>是否包含某个元素</h2><p>在 Python 中，可以使用 in 关键字，判断某个元素是否是序列的成员。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">arr = <span class="selector-attr">[<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;第二个元素&quot;</span> in arr)</span></span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>



<h2 id="序列最大最小值"><a href="#序列最大最小值" class="headerlink" title="序列最大最小值"></a>序列最大最小值</h2><p>Python 同样提供了内置函数来计算序列中的最大元素和最小元素。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">arr = <span class="selector-attr">[23, 234, 324, 1, 34, 23, 6, 34]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(min(arr)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(max(arr)</span></span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">324</span></span><br></pre></td></tr></table></figure>



<h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>Python 提供了大量的内置函数，用于操作序列。</p>
<table>
<thead>
<tr>
<th>内置函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>list()</td>
<td>将序列转换为列表</td>
</tr>
<tr>
<td>str()</td>
<td>将序列转换为字符串</td>
</tr>
<tr>
<td>sum()</td>
<td>计算元素和（元素为数字类型）</td>
</tr>
<tr>
<td>sorted()</td>
<td>对元素进行排序</td>
</tr>
<tr>
<td>reversed()</td>
<td>反向序列中的元素</td>
</tr>
<tr>
<td>enumerate()</td>
<td>将序列组合为一个索引序列，多用在for循环中</td>
</tr>
</tbody></table>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul>
<li>可变序列。</li>
<li>所有元素放在一对中括号 <code>[]</code> 中，每个元素之间使用英文逗号 <code>,</code> 分割开来。</li>
<li>元素可以是任意类型。</li>
<li>同一列表的元素类型可以不同。</li>
<li>元素可重复。</li>
</ul>
<h2 id="创建空列表"><a href="#创建空列表" class="headerlink" title="创建空列表"></a>创建空列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emptylist = []</span><br></pre></td></tr></table></figure>



<h2 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="list-函数"><a href="#list-函数" class="headerlink" title="list() 函数"></a>list() 函数</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">arr = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">2</span>))</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(arr)</span></span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>]</span><br></pre></td></tr></table></figure>



<h2 id="删除列表"><a href="#删除列表" class="headerlink" title="删除列表"></a>删除列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>]</span><br><span class="line"><span class="keyword">del</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure>

<h2 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 内置函数 enumerate()</span></span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">list</span>):</span><br><span class="line">    <span class="built_in">print</span>(index, item)</span><br></pre></td></tr></table></figure>



<h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>



<h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">list</span>.append(<span class="string">&quot;第五元素&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;第一个元素&#x27;</span>, <span class="string">&#x27;第二个元素&#x27;</span>, <span class="string">&#x27;第三个元素&#x27;</span>, <span class="string">&#x27;第四个元素&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;第一个元素&#x27;</span>, <span class="string">&#x27;第二个元素&#x27;</span>, <span class="string">&#x27;第三个元素&#x27;</span>, <span class="string">&#x27;第四个元素&#x27;</span>, <span class="string">&#x27;第五元素&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>]</span><br><span class="line"><span class="built_in">list</span>[<span class="number">0</span>] = <span class="string">&quot;修改后的第一个元素&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;修改后的第一个元素&#x27;</span>, <span class="string">&#x27;第二个元素&#x27;</span>, <span class="string">&#x27;第三个元素&#x27;</span>, <span class="string">&#x27;第四个元素&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>]</span><br><span class="line"><span class="keyword">del</span> <span class="built_in">list</span>[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;第一个元素&#x27;</span>, <span class="string">&#x27;第三个元素&#x27;</span>, <span class="string">&#x27;第四个元素&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="列表计算"><a href="#列表计算" class="headerlink" title="列表计算"></a>列表计算</h2><p>使用列表对象的 <code>count()</code> 方法，可以统计列表中包含的某个元素出现的次数，<code>index()</code> 方法，可以获取该对象在列表中首次出现的索引位置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>.count(<span class="string">&quot;第二个元素&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>.index(<span class="string">&quot;第二个元素&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>



<p>Python 的内置函数 <code>sum()</code> 可以对列表的元素进行统计。（列表的元素必须是数字类型）</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">list = <span class="selector-attr">[1, 3, 34, 451, 3]</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(sum(list)</span></span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">492</span></span><br></pre></td></tr></table></figure>



<p>可以使用列表对象的方法 <code>sort()</code> 或者 Python 的内置函数对列表进行排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">34</span>, <span class="number">451</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">list</span>.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(<span class="built_in">list</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(<span class="built_in">list</span>, reverse=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">34</span>, <span class="number">451</span>]</span><br><span class="line">[<span class="number">451</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">34</span>, <span class="number">451</span>]</span><br><span class="line">[<span class="number">451</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>



<p>值得一提的是，列表对象的 <code>sort()</code> 方法，是在原列表的基础上对列表元素进行排序，而内置函数 <code>sorted()</code>是建立了一个副本，对该副本的元素进行排序。</p>
<h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><p>使用列表推导式，可以快速生成一个列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">list1 = [random.randint(<span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line">list2 = [x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> list1]</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"></span><br><span class="line">list3 = [x <span class="keyword">for</span> x <span class="keyword">in</span> list1 <span class="keyword">if</span> x &gt; <span class="number">50</span>]</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">25</span>, <span class="number">98</span>, <span class="number">73</span>, <span class="number">70</span>, <span class="number">95</span>, <span class="number">30</span>, <span class="number">62</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">69</span>]</span><br><span class="line">[<span class="number">50</span>, <span class="number">196</span>, <span class="number">146</span>, <span class="number">140</span>, <span class="number">190</span>, <span class="number">60</span>, <span class="number">124</span>, <span class="number">30</span>, <span class="number">46</span>, <span class="number">138</span>]</span><br><span class="line">[<span class="number">98</span>, <span class="number">73</span>, <span class="number">70</span>, <span class="number">95</span>, <span class="number">62</span>, <span class="number">69</span>]</span><br></pre></td></tr></table></figure>





<h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><ul>
<li>元组与列表唯一的不同是，元组是不可变序列，不能单独对元组的某一个元素进行修改。</li>
</ul>
<h2 id="创建空元组"><a href="#创建空元组" class="headerlink" title="创建空元组"></a>创建空元组</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emptytuple = ()</span><br></pre></td></tr></table></figure>

<h2 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuplearr = (<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="tuple-函数"><a href="#tuple-函数" class="headerlink" title="tuple() 函数"></a>tuple() 函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(<span class="built_in">range</span>(<span class="number">5</span>, <span class="number">20</span>)))</span><br></pre></td></tr></table></figure>

<h2 id="删除元组"><a href="#删除元组" class="headerlink" title="删除元组"></a>删除元组</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuplearr = (<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>)</span><br><span class="line"><span class="keyword">del</span> tuplearr</span><br></pre></td></tr></table></figure>

<h2 id="遍历元组"><a href="#遍历元组" class="headerlink" title="遍历元组"></a>遍历元组</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuplearr = (<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tuplearr:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(tuplearr):</span><br><span class="line">    <span class="built_in">print</span>(index, item)</span><br></pre></td></tr></table></figure>

<h2 id="访问元素-1"><a href="#访问元素-1" class="headerlink" title="访问元素"></a>访问元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuplearr = (<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuplearr[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第三个元素</span><br></pre></td></tr></table></figure>



<h2 id="修改元素-1"><a href="#修改元素-1" class="headerlink" title="修改元素"></a>修改元素</h2><blockquote>
<p>元组和列表最大的不同，就在于元组是不可变序列，元组内的元组不可以被修改。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuplearr = (<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>)</span><br><span class="line">tuplearr[<span class="number">1</span>] = <span class="string">&quot;第五个元素&quot;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：报错</p>
<blockquote>
<p>如果想要修改元组的元素，必须将整个元组全部重新赋值。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuplearr = (<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第二个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuplearr)</span><br><span class="line">tuplearr = (<span class="string">&quot;第一个元素&quot;</span>, <span class="string">&quot;第五个元素&quot;</span>, <span class="string">&quot;第三个元素&quot;</span>, <span class="string">&quot;第四个元素&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuplearr)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;第一个元素&#x27;</span>, <span class="string">&#x27;第二个元素&#x27;</span>, <span class="string">&#x27;第三个元素&#x27;</span>, <span class="string">&#x27;第四个元素&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;第一个元素&#x27;</span>, <span class="string">&#x27;第五个元素&#x27;</span>, <span class="string">&#x27;第三个元素&#x27;</span>, <span class="string">&#x27;第四个元素&#x27;</span>)</span><br></pre></td></tr></table></figure>





<h2 id="元组推导式"><a href="#元组推导式" class="headerlink" title="元组推导式"></a>元组推导式</h2><blockquote>
<p>元组推导式和列表推导式不同的地方在于，列表推导式生成的是一个列表对象，而元组推导式生成的是一个生成器对象，我们需要使用 <code>tuple()</code> 函数将其转换为元组。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">randomtuple1 = (random.randint(<span class="number">10</span>, <span class="number">20</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">randomtuple1 = <span class="built_in">tuple</span>(randomtuple1)</span><br><span class="line"><span class="built_in">print</span>(randomtuple1)</span><br><span class="line"></span><br><span class="line">randomtuple2 = (x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> randomtuple1)</span><br><span class="line">randomtuple2 = <span class="built_in">tuple</span>(randomtuple2)</span><br><span class="line"><span class="built_in">print</span>(randomtuple2)</span><br><span class="line"></span><br><span class="line">randomtuple3 = (x <span class="keyword">for</span> x <span class="keyword">in</span> randomtuple1 <span class="keyword">if</span> x &gt; <span class="number">15</span>)</span><br><span class="line">randomtuple3 = <span class="built_in">tuple</span>(randomtuple3)</span><br><span class="line"><span class="built_in">print</span>(randomtuple3)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">18</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">16</span>)</span><br><span class="line">(<span class="number">36</span>, <span class="number">20</span>, <span class="number">26</span>, <span class="number">34</span>, <span class="number">32</span>)</span><br><span class="line">(<span class="number">18</span>, <span class="number">17</span>, <span class="number">16</span>)</span><br></pre></td></tr></table></figure>



<h1 id="列表与元组的区别"><a href="#列表与元组的区别" class="headerlink" title="列表与元组的区别"></a>列表与元组的区别</h1><ul>
<li>列表是可变序列，列表元素可以修改；元组是不可变序列，元组元素不可以修改。</li>
<li>列表可以使用 <code>append()</code> 、<code>extend()</code> 、<code>insert()</code> 、<code>remove()</code> 、<code>pop()</code> 等方法对列表进行修改，元组没有这些方法修改元素，同时元组也无法删除元素。</li>
<li>列表支持用切片修改元素，元组不支持切片修改元素。</li>
<li>元组的访问速度比列表快。</li>
<li>列表不能作为字典的键，元组可以。</li>
</ul>
<h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><ul>
<li>字典通过键值获取字典中保存的数据，不通过索引获取。</li>
<li>字典是无序的。</li>
<li>字典是可变序列的。</li>
<li>字典的键值是唯一的，如果有相同键值，后面的会覆盖前面的。</li>
<li>字典是键必须不可变。</li>
</ul>
<h2 id="创建空字典"><a href="#创建空字典" class="headerlink" title="创建空字典"></a>创建空字典</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary = &#123;&#125;</span><br><span class="line">dictionary = <span class="built_in">dict</span>()</span><br></pre></td></tr></table></figure>



<h2 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;肖总&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dictionary)</span><br><span class="line"></span><br><span class="line">keylist = [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;key2&quot;</span>, <span class="string">&quot;key3&quot;</span>]</span><br><span class="line">valuelist = [<span class="string">&quot;value1&quot;</span>, <span class="string">&quot;value2&quot;</span>, <span class="string">&quot;value3&quot;</span>, <span class="string">&quot;value4&quot;</span>]</span><br><span class="line">dictionary = <span class="built_in">dict</span>(<span class="built_in">zip</span>(keylist, valuelist))</span><br><span class="line"><span class="built_in">print</span>(dictionary)</span><br><span class="line"></span><br><span class="line">dictionary = <span class="built_in">dict</span>(key1=<span class="string">&quot;value1&quot;</span>, key2=<span class="string">&quot;value2&quot;</span>, key3=<span class="string">&quot;value3&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dictionary)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;肖总&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 <code>zip()</code> 函数创建字典，字典元素个数取两个列表长度较短的那个。</p>
</blockquote>
<h2 id="删除字典"><a href="#删除字典" class="headerlink" title="删除字典"></a>删除字典</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dictionary</span>.clear()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> dictionary</span><br></pre></td></tr></table></figure>



<h2 id="访问字典"><a href="#访问字典" class="headerlink" title="访问字典"></a>访问字典</h2><p>字典只能通过键值去访问内部的元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;肖总&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dictionary[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(dictionary.get(<span class="string">&quot;name&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(dictionary[<span class="string">&quot;age&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(dictionary.get(<span class="string">&quot;age&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">肖总</span><br><span class="line">肖总</span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure>

<p>值得一提的是，如果直接使用 <code>[键值]</code>获得的时候，字典中不存在该键值，会直接爆错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;肖总&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dictionary[<span class="string">&quot;sex&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>运行结果：报错</p>
<p>使用 <code>get()</code>方法如果没有该键值会返回 <code>None</code>值，而且可以设置第二个参数为默认值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;肖总&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dictionary.get(<span class="string">&quot;sex&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(dictionary.get(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;未知&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">None</span></span><br><span class="line">未知</span><br></pre></td></tr></table></figure>



<h2 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h2><p>可以使用字典的 <code>items()</code> 方法遍历字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;肖总&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dictionary.items():</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dictionary.items():</span><br><span class="line">    <span class="built_in">print</span>(key, value)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;肖总&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">name 肖总</span><br><span class="line">age <span class="number">18</span></span><br></pre></td></tr></table></figure>



<h2 id="修改元素-2"><a href="#修改元素-2" class="headerlink" title="修改元素"></a>修改元素</h2><p>字典可以直接通过添加键值的方式，对字典中的元素进行添加，修改等操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;肖总&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dictionary)</span><br><span class="line">dictionary[<span class="string">&quot;sex&quot;</span>] = <span class="string">&quot;男&quot;</span></span><br><span class="line"><span class="built_in">print</span>(dictionary)</span><br><span class="line">dictionary[<span class="string">&quot;sex&quot;</span>] = <span class="string">&quot;女&quot;</span></span><br><span class="line"><span class="built_in">print</span>(dictionary)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;肖总&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;肖总&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;肖总&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;女&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>



<p>字典可以通过 <code>del</code>命令删除字典元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;肖总&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dictionary)</span><br><span class="line"><span class="keyword">del</span> dictionary[<span class="string">&quot;age&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(dictionary)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;肖总&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;肖总&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>如果删除一个不存在的键值，会直接报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;肖总&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">del</span> dictionary[<span class="string">&quot;sex&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>运行结果：报错</p>
<p>正确的删除方式为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;肖总&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;sex&quot;</span> <span class="keyword">in</span> dictionary:</span><br><span class="line">    <span class="keyword">del</span> dictionary[<span class="string">&quot;sex&quot;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>]</span><br><span class="line">value = [<span class="string">&quot;肖总&quot;</span>, <span class="string">&quot;18&quot;</span>]</span><br><span class="line">dictionary = &#123;i: j + <span class="string">&quot;~&quot;</span> <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(key, value)&#125;</span><br><span class="line"><span class="built_in">print</span>(dictionary)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;肖总~&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;18~&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>





<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><blockquote>
<p>集合和列表一样，都是若干个元素的集合，不过集合和列表的区别在于，集合中如果有重复元素，只会保留一个。</p>
</blockquote>
<h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">setname = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(setname)</span><br></pre></td></tr></table></figure>



<p>可以使用 <code>set()</code>函数，将列表，元组转换为集合。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(<span class="built_in">list</span>))</span><br><span class="line"><span class="built_in">tuple</span> = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(<span class="built_in">tuple</span>))</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>



<h2 id="修改集合"><a href="#修改集合" class="headerlink" title="修改集合"></a>修改集合</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">setname = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(setname)</span><br><span class="line">setname.add(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(setname)</span><br><span class="line">setname.remove(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(setname)</span><br></pre></td></tr></table></figure>



<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>



<h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">setname1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">setname2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line"><span class="built_in">print</span>(setname1 &amp; setname2)</span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line"><span class="built_in">print</span>(setname1 | setname2)</span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line"><span class="built_in">print</span>(setname1 - setname2)</span><br><span class="line"><span class="built_in">print</span>(setname2 - setname1)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">&#123;<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>





<h1 id="序列之间的区别"><a href="#序列之间的区别" class="headerlink" title="序列之间的区别"></a>序列之间的区别</h1><table>
<thead>
<tr>
<th>序列</th>
<th>是否可变</th>
<th>是否重复</th>
<th>是否有序</th>
<th>定义符号</th>
</tr>
</thead>
<tbody><tr>
<td>列表(list）</td>
<td>可变</td>
<td>可重复</td>
<td>有序</td>
<td>[]</td>
</tr>
<tr>
<td>元组(tuple）</td>
<td>不可变</td>
<td>可重复</td>
<td>有序</td>
<td>()</td>
</tr>
<tr>
<td>字典(dictionary）</td>
<td>可变</td>
<td>不可重复</td>
<td>无序</td>
<td>{key:value}</td>
</tr>
<tr>
<td>集合(set）</td>
<td>可变</td>
<td>不可重复</td>
<td>无序</td>
<td>{}</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>WebStrom 开发 Vue 项目，安装 ESLint 代码风格检查工具</title>
    <url>/2021/08/30/WebStrom%20%E5%BC%80%E5%8F%91%20Vue%20%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%AE%89%E8%A3%85%20ESLint%20%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>WebStrom 开发 Vue 项目，安装 ESLint 代码风格检查工具</p>
<span id="more"></span>

<h1 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h1><blockquote>
<p>ESLint最初是由<a href="http://nczonline.net">Nicholas C. Zakas</a> 于2013年6月创建的开源项目。它的目标是提供一个插件化的javascript代码检测工具。</p>
</blockquote>
<p>在一个 Vue 项目中要使用 ESLint 工具，首先需要安装 Vue，并创建一个简单的 Vue 项目，而后在 Vue 项目的基础上安装 ESLint 依赖，最后进行 ESLint 的相关配置。</p>
<h2 id="创建-Vue-项目"><a href="#创建-Vue-项目" class="headerlink" title="创建 Vue 项目"></a>创建 Vue 项目</h2><p>1、使用 npm 安装 Vue3 的最新版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vue@next</span><br></pre></td></tr></table></figure>



<p>2、安装最新版本的 Vue-cli 脚手架模板。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli@next</span><br></pre></td></tr></table></figure>



<p>3、使用 Vite 构建项目。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line">cd &lt;project-name&gt;</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>



<h2 id="安装-ESLint"><a href="#安装-ESLint" class="headerlink" title="安装 ESLint"></a>安装 ESLint</h2><p>我们可以使用 npm 命令安装 ESLint，一共需要安装三个 ESLint 项目的依赖，本地安装和全局安装任选一个即可。</p>
<ul>
<li>本地安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install eslint --save-dev</span><br><span class="line">npm install eslint-plugin-vue --save-dev</span><br><span class="line">npm install babel-eslint --save-dev</span><br></pre></td></tr></table></figure>

<ul>
<li>全局安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g eslint</span><br><span class="line">npm install -g eslint-plugin-vue</span><br><span class="line">npm install -g babel-eslint</span><br></pre></td></tr></table></figure>



<h2 id="配置-WebStrom"><a href="#配置-WebStrom" class="headerlink" title="配置 WebStrom"></a>配置 WebStrom</h2><p>在 Vue 项目中安装完 ESLint 依赖，还需要对 WebStrom 进行配置。</p>
<p>打开 File -&gt; Settings -&gt; Languages &amp; Frameworks -&gt; JavaScript -&gt; Code Quality Tools -&gt; ESLint</p>
<p>界面如下：</p>
<p><img src="/images/2023/02/01.png" alt="img"></p>
<p>最后，点击界面右下角的 <code>Apply</code> 按钮，应用该配置即可。</p>
<h2 id="添加-ESLint-配置文件"><a href="#添加-ESLint-配置文件" class="headerlink" title="添加 ESLint 配置文件"></a>添加 ESLint 配置文件</h2><p>在没有 ESLint 配置文件的情况下，会使用默认的代码风格配置进行检查，我们可以给项目增加 ESLint 的配置文件来对项目进行代码风格配置，变成自己适应的代码风格。</p>
<ul>
<li>在项目的顶级目录下新增 <code>.eslintrc.js</code> 和 <code>.eslintignore</code> 文件，其中 <code>.eslintrc.js</code> 文件是 ESLint 的代码风格配置文件，而 <code>.eslintignore</code> 文件，则是忽略 ESLint 代码风格检查的文件的名称或路径的配置文件。</li>
</ul>
<h3 id="eslintignore"><a href="#eslintignore" class="headerlink" title=".eslintignore"></a>.eslintignore</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">build<span class="comment">/*.js</span></span><br><span class="line"><span class="comment">src/assets</span></span><br><span class="line"><span class="comment">public</span></span><br><span class="line"><span class="comment">dist</span></span><br></pre></td></tr></table></figure>



<h3 id="eslintrc-js"><a href="#eslintrc-js" class="headerlink" title=".eslintrc.js"></a>.eslintrc.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;babel-eslint&#x27;</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es6</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;plugin:vue/recommended&#x27;</span>, <span class="string">&#x27;eslint:recommended&#x27;</span>],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add your custom rules here</span></span><br><span class="line">  <span class="comment">// it is base on https://github.com/vuejs/eslint-config-vue</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;vue/max-attributes-per-line&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;singleline&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="string">&#x27;multiline&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;max&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">&#x27;allowFirstLine&#x27;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;vue/singleline-html-element-content-newline&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue/multiline-html-element-content-newline&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue/name-property-casing&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;PascalCase&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;vue/no-v-html&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;accessor-pairs&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;arrow-spacing&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;before&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;block-spacing&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;brace-style&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;1tbs&#x27;</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;allowSingleLine&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;camelcase&#x27;</span>: [<span class="number">0</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;properties&#x27;</span>: <span class="string">&#x27;always&#x27;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;comma-dangle&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;comma-spacing&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;before&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;comma-style&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;last&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;constructor-super&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;curly&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;multi-line&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;dot-location&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;property&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;eol-last&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;eqeqeq&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;always&#x27;</span>, &#123; <span class="string">&#x27;null&#x27;</span>: <span class="string">&#x27;ignore&#x27;</span> &#125;],</span><br><span class="line">    <span class="string">&#x27;generator-star-spacing&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;before&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;handle-callback-err&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;^(err|error)$&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;indent&#x27;</span>: [<span class="number">2</span>, <span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;SwitchCase&#x27;</span>: <span class="number">1</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;jsx-quotes&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;prefer-single&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;key-spacing&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;beforeColon&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&#x27;afterColon&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;keyword-spacing&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;before&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;new-cap&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;newIsCap&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;capIsNew&#x27;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;new-parens&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-array-constructor&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-caller&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-class-assign&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-cond-assign&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-const-assign&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-control-regex&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;no-delete-var&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-dupe-args&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-dupe-class-members&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-dupe-keys&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-duplicate-case&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-empty-character-class&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-empty-pattern&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-eval&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-ex-assign&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-extend-native&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-extra-bind&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-extra-boolean-cast&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-extra-parens&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;functions&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;no-fallthrough&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-floating-decimal&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-func-assign&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-implied-eval&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-inner-declarations&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;functions&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;no-invalid-regexp&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-irregular-whitespace&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-iterator&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-label-var&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-labels&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;allowLoop&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&#x27;allowSwitch&#x27;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;no-lone-blocks&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-mixed-spaces-and-tabs&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-multi-spaces&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-multi-str&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-multiple-empty-lines&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;max&#x27;</span>: <span class="number">1</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;no-native-reassign&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-negated-in-lhs&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-new-object&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-new-require&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-new-symbol&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-new-wrappers&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-obj-calls&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-octal&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-octal-escape&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-path-concat&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-proto&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-redeclare&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-regex-spaces&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-return-assign&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;except-parens&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;no-self-assign&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-self-compare&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-sequences&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-shadow-restricted-names&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-spaced-func&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-sparse-arrays&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-this-before-super&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-throw-literal&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-trailing-spaces&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-undef&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-undef-init&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-unexpected-multiline&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-unmodified-loop-condition&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-unneeded-ternary&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;defaultAssignment&#x27;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;no-unreachable&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-unsafe-finally&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-unused-vars&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;vars&#x27;</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;args&#x27;</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;no-useless-call&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-useless-computed-key&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-useless-constructor&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-useless-escape&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;no-whitespace-before-property&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-with&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;one-var&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;initialized&#x27;</span>: <span class="string">&#x27;never&#x27;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;operator-linebreak&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;after&#x27;</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;overrides&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;?&#x27;</span>: <span class="string">&#x27;before&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;:&#x27;</span>: <span class="string">&#x27;before&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;padded-blocks&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;quotes&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;single&#x27;</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;avoidEscape&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;allowTemplateLiterals&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;semi&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;semi-spacing&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;before&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;space-before-blocks&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;space-before-function-paren&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;space-in-parens&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;space-infix-ops&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;space-unary-ops&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;words&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;nonwords&#x27;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;spaced-comment&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;markers&#x27;</span>: [<span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;globals&#x27;</span>, <span class="string">&#x27;eslint&#x27;</span>, <span class="string">&#x27;eslint-disable&#x27;</span>, <span class="string">&#x27;*package&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;,&#x27;</span>]</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;template-curly-spacing&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;use-isnan&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;valid-typeof&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;wrap-iife&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;any&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;yield-star-spacing&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;both&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;yoda&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;prefer-const&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="number">2</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;object-curly-spacing&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">objectsInObjects</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;array-bracket-spacing&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="格式化代码快捷键"><a href="#格式化代码快捷键" class="headerlink" title="格式化代码快捷键"></a>格式化代码快捷键</h2><p>在配置完 ESLint 代码风格检查工具之后，我们可以直接格式化代码，使得我们的前端代码自动格式化为 ESLint 的所配置的代码风格。</p>
<h3 id="右键格式化"><a href="#右键格式化" class="headerlink" title="右键格式化"></a>右键格式化</h3><p>在需要格式化的文件中点击鼠标右键，可以看到右键菜单中有一个 <code>Fix ESLint Problems</code> 的选项，点击该选项，即可格式化该文件的全部代码。</p>
<p><img src="/images/2023/02/02.png" alt="img"></p>
<h3 id="快捷键格式化"><a href="#快捷键格式化" class="headerlink" title="快捷键格式化"></a>快捷键格式化</h3><p>右键菜单的方法毕竟还是比较繁琐的，我们还可以通过配置快捷键的方式，直接使用快捷键对文件代码进行格式化操作。</p>
<p>打开 File -&gt; Settings -&gt; Keymap</p>
<p><img src="/images/2023/02/03.png" alt="img"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>WebStrom</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/15/hello-world/</url>
    <content><![CDATA[<p>欢迎来到我的博客！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>一篇博客教会你写序列化工具</title>
    <url>/2023/02/18/%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%95%99%E4%BC%9A%E4%BD%A0%E5%86%99%E5%BA%8F%E5%88%97%E5%8C%96%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="什么是序列化？"><a href="#什么是序列化？" class="headerlink" title="什么是序列化？"></a>什么是序列化？</h2><p>总所周知，在Java语言中，所有的数据都是以对象的形式存在Java堆中。</p>
<p>但是Java对象如果要存储在别的地方，那么单纯的Java对象就无法满足了，必须要将Java对象转为一种可以存储的格式，这个转换的过程就是序列化。</p>
<p>同理而言，将一种存储的格式转换为Java对象的过程，就是反序列化。</p>
<span id="more"></span>

<h2 id="序列化格式"><a href="#序列化格式" class="headerlink" title="序列化格式"></a>序列化格式</h2><p>序列化是一种通用的称呼，对于序列化之后转成的数据格式并没有硬性的要求，但是一般都会将格式定为字节数组，或者字符串之类通用的数据格式。</p>
<p>例如在Java中存在这样一个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String username, String password, <span class="type">float</span> money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get、set、toString等方法省略……</span></span><br></pre></td></tr></table></figure>

<p>使用JDK自带的序列化工具，可以将这样一个Java对象转为字节数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;次时代小羊&quot;</span>, <span class="string">&quot;222222&quot;</span>, <span class="number">99.44F</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">oos.writeObject(user);</span><br><span class="line"><span class="type">byte</span>[] bytes = bos.toByteArray();</span><br><span class="line">System.out.println(<span class="string">&quot;length:&quot;</span> + bytes.length);</span><br><span class="line">System.out.println(<span class="string">&quot;bytes:&quot;</span> + Arrays.toString(bytes));</span><br></pre></td></tr></table></figure>

<p>Java对象序列化后得到的字节数组可以写入数据库，或者文件系统中，以后如果需要使用这个Java对象，可以从数据库或者文件中将字节数组读取出来，重新反序列化为Java对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);</span><br><span class="line"><span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">System.out.println(<span class="string">&quot;object:&quot;</span> + object);</span><br></pre></td></tr></table></figure>

<p>但是JDK自带的序列化工具虽然可以将Java对象转换为字节数组，但是这个字节数组是完全按照Java的格式来序列化的，反序列化也需要使用JDK的工具才行。</p>
<p>所以这种序列化方式只能在Java语言中通用。</p>
<p>（虽然理论上别的语言平台也可以按照JDK反序列化的方式实现这个工具，但是别人可不会惯着你！）</p>
<p>即便是在Java平台内部，这种序列化方式也非常笨重，因为在这个序列化得到的字节数组中序列化了非常多的与用户数据无关的对象数据。</p>
<p>例如上述的<code>user</code>对象中，用户真正关心的数据只有四个，分别是<code>id</code>、<code>username</code>、<code>password</code>、<code>money</code>，至于Java对象内部是一些数据，并不是用户真正关心的。</p>
<p>这个时候，我们就追求一种简洁明了，而且跨平台通用的序列化格式。</p>
<h2 id="JSON序列化"><a href="#JSON序列化" class="headerlink" title="JSON序列化"></a>JSON序列化</h2><p>在Java的早起，XML作为一种可扩展标记语言，因为它的平台无关性、可扩展性、数据遵循严格的格式，人类可读等优点，得到了Java开发者的青睐。</p>
<p>早期XML在Java中大行其道，很多Java对象最终都会被序列化为XML文本存储或者转发。</p>
<p>因为其具有平台无关性，很多语言平台或第三方库也纷纷实现了XML的标准。</p>
<p>不过伴随着JSON格式的数据的崛起，JSON很快就取代了XML的地位，XML具有的优点JSON都具有，而且比XML更加简洁，文本更小。</p>
<p>使用第三方类库Jackson，将一个Java对象序列化为字符串或者字节数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;次时代小羊&quot;</span>, <span class="string">&quot;222222&quot;</span>, <span class="number">99.44F</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="type">byte</span>[] bytes1 = objectMapper.writeValueAsBytes(user);</span><br><span class="line">System.out.println(<span class="string">&quot;length:&quot;</span> + bytes1.length);</span><br><span class="line">System.out.println(<span class="string">&quot;bytes:&quot;</span> + Arrays.toString(bytes1));</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(user);</span><br><span class="line">System.out.println(<span class="string">&quot;length:&quot;</span> + json.length());</span><br><span class="line">System.out.println(<span class="string">&quot;json:&quot;</span> + json);</span><br></pre></td></tr></table></figure>

<p>Jackson序列化得到的字符串或者字节数组，同样可以存储到数据库，或者通过网络转发出去，并被支持JSON格式的语言平台解析。</p>
<blockquote>
<p>Jackson序列化为字符串和字节数组本质上并没有区别，序列化为字节数组，其实就是将序列化得到的字符串转为字节数组。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> objectMapper.readValue(bytes1, User.class);</span><br><span class="line">System.out.println(<span class="string">&quot;user1:&quot;</span> + user1);</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> objectMapper.readValue(json, User.class);</span><br><span class="line">System.out.println(<span class="string">&quot;user2:&quot;</span> + user2);</span><br></pre></td></tr></table></figure>

<p>JSON序列化是目前一种比较理想的序列化方式，各种语言平台，甚至是数据库都对JSON格式的数据有支持。</p>
<h2 id="精简序列化数据"><a href="#精简序列化数据" class="headerlink" title="精简序列化数据"></a>精简序列化数据</h2><p>我们先来看一下使用Jackson序列化得到的字符串和字节数组数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;次时代小羊&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;222222&quot;</span><span class="punctuation">,</span><span class="attr">&quot;money&quot;</span><span class="punctuation">:</span><span class="number">99.44</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<table>
    <tr>
        <td>123</td>
        <td>34</td>
        <td>105</td>
        <td>100</td>
        <td>34</td>
        <td>58</td>
        <td>49</td>
        <td>44</td>
        <td>34</td>
        <td>117</td>
    </tr>
    <tr>
        <td>{</td>
        <td>"</td>
        <td>i</td>
        <td>d</td>
        <td>"</td>
        <td>:</td>
        <td>1</td>
        <td>,</td>
        <td>"</td>
        <td>u</td>
    </tr>
    <tr>
        <td>115</td>
        <td>101</td>
        <td>114</td>
        <td>110</td>
        <td>97</td>
        <td>109</td>
        <td>101</td>
        <td>34</td>
        <td>58</td>
        <td>34</td>
    </tr>
    <tr>
        <td>s</td>
        <td>e</td>
        <td>r</td>
        <td>n</td>
        <td>a</td>
        <td>m</td>
        <td>e</td>
        <td>"</td>
        <td>:</td>
        <td>"</td>
    </tr>
    <tr>
        <td>-26</td>
        <td>-84</td>
        <td>-95</td>
        <td>-26</td>
        <td>-105</td>
        <td>-74</td>
        <td>-28</td>
        <td>-69</td>
        <td>-93</td>
        <td>-27</td>
    </tr>
    <tr>
        <td colspan="3">次</td>
        <td colspan="3">时</td>
        <td colspan="3">代</td>
        <td></td>
    </tr>
    <tr>
        <td>-113</td>
        <td>-84</td>
        <td>-25</td>
        <td>-66</td>
        <td>-118</td>
        <td>34</td>
        <td>44</td>
        <td>34</td>
        <td>112</td>
        <td>97</td>
    </tr>
    <tr>
        <td colspan="2">小</td>
        <td colspan="3">羊</td>
        <td>"</td>
        <td>,</td>
        <td>"</td>
        <td>p</td>
        <td>a</td>
    </tr>
    <tr>
        <td>115</td>
        <td>115</td>
        <td>119</td>
        <td>111</td>
        <td>114</td>
        <td>100</td>
        <td>34</td>
        <td>58</td>
        <td>34</td>
        <td>50</td>
    </tr>
    <tr>
        <td>s</td>
        <td>s</td>
        <td>w</td>
        <td>o</td>
        <td>r</td>
        <td>d</td>
        <td>"</td>
        <td>:</td>
        <td>"</td>
        <td>2</td>
    </tr>
    <tr>
        <td>50</td>
        <td>50</td>
        <td>50</td>
        <td>50</td>
        <td>50</td>
        <td>34</td>
        <td>44</td>
        <td>34</td>
        <td>109</td>
        <td>111</td>
    </tr>
    <tr>
        <td>2</td>
        <td>2</td>
        <td>2</td>
        <td>2</td>
        <td>2</td>
        <td>"</td>
        <td>,</td>
        <td>"</td>
        <td>m</td>
        <td>o</td>
    </tr>
    <tr>
        <td>110</td>
        <td>101</td>
        <td>121</td>
        <td>34</td>
        <td>58</td>
        <td>57</td>
        <td>57</td>
        <td>46</td>
        <td>52</td>
        <td>52</td>
    </tr>
    <tr>
        <td>n</td>
        <td>e</td>
        <td>y</td>
        <td>"</td>
        <td>:</td>
        <td>9</td>
        <td>9</td>
        <td>.</td>
        <td>4</td>
        <td>4</td>
    </tr>
    <tr>
        <td>125</td>
    </tr>
    <tr>
        <td>}</td>
    </tr>
</table>


<p>以上就是使用Jackson序列化得到的字符串，以及字节数组和字符串字符的对应表，其中中文字符使用三个字节表示。</p>
<p>按照上面的对照表，我们可以知道序列化为字节数组的时候，JSON格式的字符串都序列化了哪些内容。</p>
<p>而我们前面也说过，用户真正关心的数据只有四个，分别是<code>id</code>、<code>username</code>、<code>password</code>、<code>money</code>，而这四个数据的名称（字段名）对于数据本身而言，只是做一个定位的作用。</p>
<p>如果我们可以预先确定序列化数据的字段顺序，而后反序列化的时候也已同样的顺序进行解析，是否就能够抛弃JSON格式中的字段名称，只将数据本身进行序列化？</p>
<p>比如将JSON格式的字符串缩减成下面的形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>次时代小羊<span class="number">22222299.44</span></span><br></pre></td></tr></table></figure>

<p>但是这也有一个问题，那就是我们无法确定每个数据的长度，比如<code>username</code>这个字段，它对应的值到底是<code>次时代小羊</code>，还是<code>次时代小羊222222</code>，甚至可能还是<code>次时代小羊22222299.44</code>？</p>
<p>所以为了确定数据的长度，我们还必须加入数据的长度作为表示，因为数据的长度都可以使用整形类型的数据进行表示。</p>
<p>比如我们可以约定，字符开始的第一个小于等于9的数字为数据长度，我们这样就可以很清晰的定位并分隔数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">115</span>次时代小羊<span class="number">6222222599.44</span></span><br></pre></td></tr></table></figure>

<p>当然，这只是字符串可以这样表示，如果使用字节数组，那么我们可以根据单个数据的最大字节数，约定<code>byte</code>或者<code>int</code>类型的数据来表示长度。</p>
<blockquote>
<p><code>byte</code>支持单个数据的字节数组长度为255（2 ^ 8-1），<code>int</code>支持单个数据的字节数组长度为4294967295（2 ^ 32-1），因为数据长度只可能为正整数，所以使用无符号数可以最大程度支持。</p>
</blockquote>
<p>而且一些特定类型的数据长度我们可以不需要确定，一些语言平台已经规定了这些数据类型的字节长度，比如在Java语言中，<code>int</code>、<code>float</code>类型的数据长度为4，那么我们只需要规定一些不确定的数据的字节长度即可，比如字符串类型，字节数组类型等等。</p>
<p>我们可以重新设计简化格式：</p>
<table>
<thead>
<tr>
<th>长度</th>
<th>数据</th>
<th>类型</th>
<th>是否需要确定数据长度</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>4</td>
<td>1</td>
<td>int</td>
<td>语言平台规定，不需要</td>
<td>int类型的数据字节长度为4</td>
</tr>
<tr>
<td>15</td>
<td>次时代小羊</td>
<td>字符串</td>
<td>需要</td>
<td>UTF-8编码下一个中文字节长度为3（或者4）</td>
</tr>
<tr>
<td>6</td>
<td>222222</td>
<td>字符串</td>
<td>需要</td>
<td>UTF-8编码兼容ASCII编码，所以长度为6</td>
</tr>
<tr>
<td>4</td>
<td>99.44</td>
<td>float</td>
<td>语言平台规定，不需要</td>
<td>float类型的数据字节长度为4</td>
</tr>
</tbody></table>
<p>数据总长度为29，加上一共四个数据，每个数据对应的字节数组长度各占一个<code>int</code>类型数据的字节长度，所以最终长度为37（29+4+4）。</p>
<p>最终得到序列化后的字节数组：</p>
<table>
    <tr>
        <td>1</td>
        <td>0</td>
        <td>0</td>
        <td>0</td>
        <td>15</td>
        <td>0</td>
        <td>0</td>
        <td>0</td>
    </tr>
    <tr>
        <td colspan="4">1</td>
        <td colspan="4">15</td>
    </tr>
    <tr>
        <td>-26</td>
        <td>-84</td>
        <td>-95</td>
        <td>-26</td>
        <td>-105</td>
        <td>-74</td>
        <td>-28</td>
        <td>-69</td>
    </tr>
    <tr>
        <td colspan="3">次</td>
        <td colspan="3">时</td>
        <td colspan="2">代</td>
    </tr>
    <tr>
        <td>-93</td>
        <td>-27</td>
        <td>-80</td>
        <td>-113</td>
        <td>-25</td>
        <td>-66</td>
        <td>-118</td>
        <td>6</td>
    </tr>
    <tr>
        <td></td>
        <td colspan="3">小</td>
        <td colspan="3">羊</td>
        <td>6</td>
    </tr>
    <tr>
        <td>0</td>
        <td>0</td>
        <td>0</td>
        <td>50</td>
        <td>50</td>
        <td>50</td>
        <td>50</td>
        <td>50</td>
    </tr>
    <tr>
        <td colspan="3"></td>
        <td>2</td>
        <td>2</td>
        <td>2</td>
        <td>2</td>
        <td>2</td>
    </tr>
    <tr>
        <td>50</td>
        <td>72</td>
        <td>-31</td>
        <td>-58</td>
        <td>66</td>
    </tr>
    <tr>
        <td>2</td>
        <td colspan="4">99.44</td>
    </tr>
</table>

<p>得到序列化后的字节数组之后，反序列化只需要按照原定的顺序，即可正确读取数据。</p>
<p>比如：</p>
<ul>
<li><p>1、读取int类型的字段<code>id</code>数据，得到数据值：1</p>
</li>
<li><p>2、读取字符串类型的字段<code>username</code>数据对应的字节数组长度，得到数据值：15</p>
<ul>
<li>2.1、向后读取长度为15的字节数组，得到数据值：次时代小羊</li>
</ul>
</li>
<li><p>3、读取字符串类型的字段<code>password</code>数据对应的字节数组长度，得到数据值：6</p>
<ul>
<li>3.1、向后读取长度为6的字节数组，得到数据值：222222</li>
</ul>
</li>
<li><p>4、读取float类型的字段<code>money</code>数据，得到数据值：99.44</p>
</li>
</ul>
<p>至此，精简序列化数据的方式都可以正确序列化和反序列化，而且序列化得到的字节数组长度更小。</p>
<p>Google的<code>ProtoBuf</code>和开源的<code>MessagePack</code>其实都是使用了类似的精简序列化的方式，不过这些开源的序列化框架更加成熟可靠，内部的实现细节也更加全面。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上三种序列化方式，各有优点，也各有缺点，我们在这里总结一下：</p>
<table>
<thead>
<tr>
<th>序列化方式</th>
<th>JDK序列化</th>
<th>JSON序列化</th>
<th>精简序列化</th>
</tr>
</thead>
<tbody><tr>
<td>序列化结果</td>
<td>字节数组</td>
<td>字符串或者字节数组</td>
<td>字节数组</td>
</tr>
<tr>
<td>是否支持跨平台</td>
<td>不支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>是否需要额外约定</td>
<td>不需要</td>
<td>不需要</td>
<td>需要</td>
</tr>
<tr>
<td>人类可读性</td>
<td>差</td>
<td>优秀</td>
<td>差</td>
</tr>
<tr>
<td>优点</td>
<td>JDK自带，无需第三方依赖，对Java语言开发者友好</td>
<td>全平台通用，序列化结果简洁工整，人类可读性强</td>
<td>全平台通用，序列化结果精简</td>
</tr>
<tr>
<td>缺点</td>
<td>只支持JDK平台，序列化结果笨重</td>
<td>一些语言平台不支持JSON格式，需要第三方库</td>
<td>扩展性较差，在需要改动序列化对象的时候，序列化和反序列化方式也需要同时改动</td>
</tr>
</tbody></table>
<p>以上三种序列化方式的优缺点已经一一列名，我们可以根据自身需要进行选择。</p>
<p>如果你进行的是一些通信软件、游戏等等对网络性能要求高，且通信格式并不会发生重大改变的开发工作，那么可以考虑选择第三种精简序列化的方式，开源平台上也有很多这种类型的序列化框架的实现，比如前面提到过的<code>ProtoBuf</code>和<code>MessagePack</code>等等。</p>
<p>如果你进行是一些Web网站等一些扩展性要求较高的开发工作，那么建议选择JSON序列化的方式，即便是一些不支持<code>JSON</code>格式的语言平台，同样有很多优秀的第三方库对其进行了支持，比如<code>Jackson</code>等等。</p>
<p>至于JDK序列化的方式，如果你有兴趣，或者开发的项目本身不支持其他序列化方式，那么也是一个不错的选择<del>~</del></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>在文章的最后，我在这里附上一个本人使用<code>Java</code>写的简单的序列化工具，有兴趣的同学可以参考一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bytes</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ONE_LENGTH</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TWO_LENGTH</span> <span class="operator">=</span> ONE_LENGTH &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">FOUR_LENGTH</span> <span class="operator">=</span> ONE_LENGTH &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EIGHT_LENGTH</span> <span class="operator">=</span> ONE_LENGTH &lt;&lt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">BOOLEAN_TRUE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">BOOLEAN_FALSE</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> readIndex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> writeIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bytes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.readIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.writeIndex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bytes</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = bytes;</span><br><span class="line">        <span class="built_in">this</span>.readIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.writeIndex = bytes.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getData() &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span> <span class="title function_">readByte</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">value</span> <span class="operator">=</span> data[readIndex];</span><br><span class="line">        readIndex += ONE_LENGTH;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">short</span> <span class="title function_">readShort</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">short</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; TWO_LENGTH; i++) &#123;</span><br><span class="line">            value = (<span class="type">short</span>) (value | (data[i + readIndex] &amp; <span class="number">0xFF</span>) &lt;&lt; i * <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        readIndex += TWO_LENGTH;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">readInt</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; FOUR_LENGTH; i++) &#123;</span><br><span class="line">            value = value | (data[i + readIndex] &amp; <span class="number">0xFF</span>) &lt;&lt; i * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        readIndex += FOUR_LENGTH;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">readLong</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; EIGHT_LENGTH; i++) &#123;</span><br><span class="line">            value = value | (data[i + readIndex] &amp; <span class="number">0xFFL</span>) &lt;&lt; i * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        readIndex += EIGHT_LENGTH;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">readBoolean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">value</span> <span class="operator">=</span> data[readIndex];</span><br><span class="line">        readIndex += ONE_LENGTH;</span><br><span class="line">        <span class="keyword">return</span> value == BOOLEAN_TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">readChar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; TWO_LENGTH; i++) &#123;</span><br><span class="line">            value += data[i + readIndex] &lt;&lt; i * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        readIndex += TWO_LENGTH;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">readFloat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> readInt();</span><br><span class="line">        <span class="keyword">return</span> Float.intBitsToFloat(intValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">readDouble</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">longValue</span> <span class="operator">=</span> readLong();</span><br><span class="line">        <span class="keyword">return</span> Double.longBitsToDouble(longValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] readBytes(<span class="type">int</span> length) &#123;</span><br><span class="line">        <span class="type">byte</span>[] tempBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[length];</span><br><span class="line">        System.arraycopy(data, readIndex, tempBytes, <span class="number">0</span>, length);</span><br><span class="line">        readIndex += length;</span><br><span class="line">        <span class="keyword">return</span> tempBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeByte</span><span class="params">(<span class="type">byte</span> value)</span> &#123;</span><br><span class="line">        expansion(ONE_LENGTH);</span><br><span class="line">        data[writeIndex] = value;</span><br><span class="line">        writeIndex += ONE_LENGTH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeShort</span><span class="params">(<span class="type">short</span> value)</span> &#123;</span><br><span class="line">        expansion(TWO_LENGTH);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; TWO_LENGTH; i++) &#123;</span><br><span class="line">            data[i + writeIndex] = (<span class="type">byte</span>) (value &gt;&gt; i * <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        writeIndex += TWO_LENGTH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeInt</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        expansion(FOUR_LENGTH);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; FOUR_LENGTH; i++) &#123;</span><br><span class="line">            data[i + writeIndex] = (<span class="type">byte</span>) (value &gt;&gt; i * <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        writeIndex += FOUR_LENGTH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeLong</span><span class="params">(<span class="type">long</span> value)</span> &#123;</span><br><span class="line">        expansion(EIGHT_LENGTH);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; EIGHT_LENGTH; i++) &#123;</span><br><span class="line">            data[i + writeIndex] = (<span class="type">byte</span>) (value &gt;&gt; i * <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        writeIndex += EIGHT_LENGTH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeBoolean</span><span class="params">(<span class="type">boolean</span> value)</span> &#123;</span><br><span class="line">        expansion(ONE_LENGTH);</span><br><span class="line">        data[writeIndex] = value ? BOOLEAN_TRUE : BOOLEAN_FALSE;</span><br><span class="line">        writeIndex += ONE_LENGTH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeChar</span><span class="params">(<span class="type">char</span> value)</span> &#123;</span><br><span class="line">        expansion(TWO_LENGTH);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; TWO_LENGTH; i++) &#123;</span><br><span class="line">            data[i + writeIndex] = (<span class="type">byte</span>) (value &gt;&gt; i * <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        writeIndex += TWO_LENGTH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFloat</span><span class="params">(<span class="type">float</span> value)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> Float.floatToIntBits(value);</span><br><span class="line">        writeInt(intValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeDouble</span><span class="params">(<span class="type">double</span> value)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">longValue</span> <span class="operator">=</span> Double.doubleToLongBits(value);</span><br><span class="line">        writeLong(longValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeBytes</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        expansion(bytes.length);</span><br><span class="line">        System.arraycopy(bytes, <span class="number">0</span>, data, writeIndex, bytes.length);</span><br><span class="line">        writeIndex += bytes.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">expansion</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.data == <span class="literal">null</span>) &#123;</span><br><span class="line">            data = <span class="keyword">new</span> <span class="title class_">byte</span>[length];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] tempBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[data.length + length];</span><br><span class="line">            System.arraycopy(data, <span class="number">0</span>, tempBytes, <span class="number">0</span>, data.length);</span><br><span class="line">            data = tempBytes;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再附带上一份序列化的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;次时代小羊&quot;</span>, <span class="string">&quot;222222&quot;</span>, <span class="number">99.44F</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Bytes</span> <span class="variable">bytes3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bytes</span>();</span><br><span class="line">bytes3.writeInt(user.getId());</span><br><span class="line"><span class="type">byte</span>[] usernameByte = user.getUsername().getBytes(StandardCharsets.UTF_8);</span><br><span class="line">bytes3.writeInt(usernameByte.length);</span><br><span class="line">bytes3.writeBytes(usernameByte);</span><br><span class="line"><span class="type">byte</span>[] passwordByte = user.getPassword().getBytes(StandardCharsets.UTF_8);</span><br><span class="line">bytes3.writeInt(passwordByte.length);</span><br><span class="line">bytes3.writeBytes(passwordByte);</span><br><span class="line">bytes3.writeFloat(user.getMoney());</span><br><span class="line">System.out.println(<span class="string">&quot;length:&quot;</span> + bytes3.getData().length);</span><br><span class="line">System.out.println(<span class="string">&quot;bytes:&quot;</span> + Arrays.toString(bytes3.getData()));</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user3.setId(bytes3.readInt());</span><br><span class="line"><span class="type">int</span> <span class="variable">usernameBytesLength</span> <span class="operator">=</span> bytes3.readInt();</span><br><span class="line">user3.setUsername(<span class="keyword">new</span> <span class="title class_">String</span>(bytes3.readBytes(usernameBytesLength)));</span><br><span class="line"><span class="type">int</span> <span class="variable">passwordBytesLength</span> <span class="operator">=</span> bytes3.readInt();</span><br><span class="line">user3.setPassword(<span class="keyword">new</span> <span class="title class_">String</span>(bytes3.readBytes(passwordBytesLength)));</span><br><span class="line">user3.setMoney(bytes3.readFloat());</span><br><span class="line">System.out.println(<span class="string">&quot;user3:&quot;</span> + user3);</span><br></pre></td></tr></table></figure>

<p>最后的最后，瑞思拜<del>~</del></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>一篇博客教会你怎么安装CentOS系统</title>
    <url>/2020/04/19/%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%95%99%E4%BC%9A%E4%BD%A0%E6%80%8E%E4%B9%88%E5%AE%89%E8%A3%85CentOS%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p>这篇博客我们来学习怎样通过VMware虚拟机软件来安装CentOS系统。<br>这篇博客是在VMware虚拟机的基础上安装CentOS系统，所以如果不知道怎么安装VMware虚拟机的同学，可以参考我之前的博客：<a href="/2020/04/19/一篇博客教会你怎么安装VMware虚拟机">一篇博客教会你怎么安装VMware虚拟机</a></p>
</blockquote>
<span id="more"></span>

<h1 id="一、下载CentOS系统镜像文件"><a href="#一、下载CentOS系统镜像文件" class="headerlink" title="一、下载CentOS系统镜像文件"></a>一、下载CentOS系统镜像文件</h1><p>CentOS系统的Linux系统比较流行的一个发行版本，CentOS系统是免费，所有人都可以从CentOS系统的官方网站中获取CentOS系统的镜像文件。<br>CentOS下载官网：<a href="http://isoredirect.centos.org/centos/8/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso">http://isoredirect.centos.org/centos/8/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso</a><br>在CentOS的官网中，我们可以看到很多个镜像网站下载地址，我们可以选择国内的镜像来进行下载，这样的话下载速度会非常可观。<br>国内的镜像推荐<code>华为</code>或者<code>阿里云</code>的镜像。<br><img src="/images/2023/02/20200415185900442.png" alt="在这里插入图片描述"></p>
<h1 id="二、在VMware中创建虚拟机"><a href="#二、在VMware中创建虚拟机" class="headerlink" title="二、在VMware中创建虚拟机"></a>二、在VMware中创建虚拟机</h1><p><strong>1、我们<code>以管理员身份运行VMware</code>，打开VMware虚拟机，点击创建新的虚拟机</strong><br><img src="/images/2023/02/20200415190905720.png" alt="在这里插入图片描述"><br><strong>2、开始创建虚拟机</strong><br><img src="/images/2023/02/20200415191542142.png" alt="在这里插入图片描述"><br><strong>3、安装客户机操作系统</strong><br><img src="/images/2023/02/20200415191722271.png" alt="在这里插入图片描述"><br><strong>4、选择客户机操作系统</strong><br><img src="/images/2023/02/20200415191925827.png" alt="在这里插入图片描述"><br><strong>5、命名虚拟机</strong><br><img src="/images/2023/02/20200415193411410.png" alt="在这里插入图片描述"><br><strong>6、指定磁盘容量</strong><br><img src="/images/2023/02/20200415192700707.png" alt="在这里插入图片描述"><br><strong>7、自定义配置</strong><br><img src="/images/2023/02/20200415193812791.png" alt="在这里插入图片描述"><br><strong>8、指定虚拟机内存</strong><br><img src="/images/2023/02/20200415194153507.png" alt="在这里插入图片描述"><br><strong>9、指定ISO映像文件路径</strong><br><img src="/images/2023/02/20200415194547766.png" alt="在这里插入图片描述"><br><strong>10、移除打印机</strong><br><img src="/images/2023/02/20200415194757891.png" alt="在这里插入图片描述"><br><strong>11、点击完成</strong><br><img src="/images/2023/02/20200415194908763.png" alt="在这里插入图片描述"><br><strong>12、虚拟机创建完成</strong><br><img src="/images/2023/02/20200415201407502.png" alt="在这里插入图片描述"></p>
<h1 id="三、安装CentOS系统"><a href="#三、安装CentOS系统" class="headerlink" title="三、安装CentOS系统"></a>三、安装CentOS系统</h1><p><strong>1、我们创建好虚拟机之后，就可以开始安装操作系统了，我们首先开启之前创建的虚拟机</strong><br><img src="/images/2023/02/2020041520181421.png" alt="在这里插入图片描述"><br><strong>2、选择检测安装</strong><br><img src="/images/2023/02/2020041520243732.png" alt="在这里插入图片描述"><br><img src="/images/2023/02/20200415202447999.png" alt="在这里插入图片描述"><br>选择检测安装之后，虚拟机会自动帮我们开始检测，这个过程大概<code>30-60秒</code>左右，等待即可。<br>完成之后出现如下界面：<br><img src="/images/2023/02/20200415202856283.png" alt="在这里插入图片描述"><br><strong>3、选择简体中文</strong><br><img src="/images/2023/02/20200415202958121.png" alt="在这里插入图片描述"><br><strong>4、调整系统时间</strong><br><img src="/images/2023/02/20200415203707220.png" alt="在这里插入图片描述"><br><img src="/images/2023/02/20200415203901353.png" alt="在这里插入图片描述"><br><strong>5、选择服务器类型</strong><br><img src="/images/2023/02/20200415204209197.png" alt="在这里插入图片描述"><br><strong>6、选择系统的安装目的地</strong><br><img src="/images/2023/02/20200415204351669.png" alt="在这里插入图片描述"><br><img src="/images/2023/02/20200415204930116.png" alt="在这里插入图片描述"><br><strong>7、开启虚拟机网络和指定主机名</strong><br><img src="/images/2023/02/20200415204953923.png" alt="在这里插入图片描述"><br><img src="/images/2023/02/20200415205835878.png" alt="在这里插入图片描述"><br><strong>8、开始安装</strong><br><img src="/images/2023/02/20200415210151647.png" alt="在这里插入图片描述"><br><strong>9、设置Root用户密码</strong><br><img src="/images/2023/02/20200415210335244.png" alt="在这里插入图片描述"><br><img src="/images/2023/02/20200415210844650.png" alt="在这里插入图片描述"><br><strong>10、等待安装</strong><br><img src="/images/2023/02/20200415211013781.png" alt="在这里插入图片描述"><br>等待安装需要一小段时间，耐心等待即可。</p>
<p><strong>11、重启系统</strong><br><img src="/images/2023/02/20200415211949410.png" alt="在这里插入图片描述"><br><strong>12、初始设置</strong><br><img src="/images/2023/02/20200415212211287.png" alt="在这里插入图片描述"><br><img src="/images/2023/02/20200415212327812.png" alt="在这里插入图片描述"><br><strong>13、结束配置</strong><br><img src="/images/2023/02/20200415212511711.png" alt="在这里插入图片描述"><br><strong>14、安装成功，欢迎界面</strong><br><img src="/images/2023/02/20200415212923944.png" alt="在这里插入图片描述"><br><img src="/images/2023/02/20200415213112150.png" alt="在这里插入图片描述"><br><img src="/images/2023/02/20200415213157314.png" alt="在这里插入图片描述"><br><strong>15、设置全名和用户名</strong><br><img src="/images/2023/02/20200415213425330.png" alt="在这里插入图片描述"><br><strong>16、设置密码</strong><br><img src="/images/2023/02/20200415213638959.png" alt="在这里插入图片描述"><br><strong>17、一切就绪，开始用吧</strong><br><img src="/images/2023/02/20200415213739774.png" alt="在这里插入图片描述"><br><strong>18、登录系统</strong><br><img src="/images/2023/02/20200415213942326.png" alt="在这里插入图片描述"><br><img src="/images/2023/02/20200415214001655.png" alt="在这里插入图片描述"><br><img src="/images/2023/02/20200415214020269.png" alt="在这里插入图片描述"><br><strong>19、开始使用</strong><br><img src="/images/2023/02/20200415214440688.png" alt="在这里插入图片描述"></p>
<p><strong>历经千难万险，终于把CentOS系统安装成功了，可以开始来上手试试CentOS系统了。</strong></p>
<blockquote>
<p><strong>最后提醒一下，如果不需要使用虚拟机了，不要直接关闭虚拟机，如果直接关闭虚拟机，下一次开机的时候会出现很多的问题，所以我们不要使用虚拟机之后，直接将虚拟机<code>挂起</code>，这样下次需要使用的时候，直接继续运行即可！</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>一篇博客教会你怎么安装VMware虚拟机</title>
    <url>/2020/04/19/%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%95%99%E4%BC%9A%E4%BD%A0%E6%80%8E%E4%B9%88%E5%AE%89%E8%A3%85VMware%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<blockquote>
<p>这篇博客我们来学习VMware虚拟机的安装</p>
</blockquote>
<span id="more"></span>

<h1 id="1、下载VMware虚拟机"><a href="#1、下载VMware虚拟机" class="headerlink" title="1、下载VMware虚拟机"></a>1、下载VMware虚拟机</h1><p>获取VMware虚拟机安装包的方法有两个：</p>
<p><strong>1、VMware官网：</strong><a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a></p>
<p><img src="/images/2023/02/20200415174651464.png" alt="在这里插入图片描述">当然，VMware是一款商业软件，是收费的。</p>
<p><strong>2、除了官网下载之外，我还在自己的百度网盘中上传了VMware安装软件。</strong><br>链接：<a href="https://pan.baidu.com/s/1QON5-U4joSboW4Xb3N0Bgg">https://pan.baidu.com/s/1QON5-U4joSboW4Xb3N0Bgg</a><br>提取码：92xr</p>
<h1 id="2、安装VMware虚拟机"><a href="#2、安装VMware虚拟机" class="headerlink" title="2、安装VMware虚拟机"></a>2、安装VMware虚拟机</h1><p>我们直接运行VMware虚拟机安装包的exe文件，开始安装。</p>
<p><strong>1、释放文件</strong><br><img src="/images/2023/02/2020041517511543.png" alt="在这里插入图片描述"></p>
<p><strong>2、VMware安装开始界面</strong><br><img src="/images/2023/02/2020041517525792.png" alt="在这里插入图片描述"></p>
<p><strong>3、接受许可协议</strong><br><img src="/images/2023/02/20200415175421150.png" alt="在这里插入图片描述"></p>
<p><strong>4、选择安装磁盘位置</strong><br><img src="/images/2023/02/20200415180809522.png" alt="在这里插入图片描述"></p>
<p><img src="/images/2023/02/20200415180916743.png" alt="在这里插入图片描述"></p>
<p><strong>5、自定义安装</strong><br><img src="/images/2023/02/2020041518102297.png" alt="在这里插入图片描述"></p>
<p><strong>6、快捷方式</strong><br><img src="/images/2023/02/20200415175746169.png" alt="在这里插入图片描述"></p>
<p><strong>7、安装</strong><br><img src="/images/2023/02/20200415175810600.png" alt="在这里插入图片描述"></p>
<p><strong>8、安装过程</strong><br><img src="/images/2023/02/20200415175846361.png" alt="在这里插入图片描述"></p>
<blockquote>
<p><strong>备注：如果是使用我百度网盘中的安装包，安装完了之后会跳出一个破解界面，点击许可证——输入——完成即可。</strong></p>
</blockquote>
<h1 id="3、开启VMware虚拟机"><a href="#3、开启VMware虚拟机" class="headerlink" title="3、开启VMware虚拟机"></a>3、开启VMware虚拟机</h1><p><strong>当安装完成之后，电脑桌面会出现一个VMware虚拟机的图标：</strong><br><img src="/images/2023/02/20200415181445981.png" alt="在这里插入图片描述"></p>
<p><strong>双击开启VMware虚拟机，虚拟机界面如下：</strong><br><img src="/images/2023/02/20200415181640707.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>上班聊天，摸鱼神器，手写一款即时通讯工具（附源码！！！）</title>
    <url>/2021/08/07/%E4%B8%8A%E7%8F%AD%E8%81%8A%E5%A4%A9%EF%BC%8C%E6%91%B8%E9%B1%BC%E7%A5%9E%E5%99%A8%EF%BC%8C%E6%89%8B%E5%86%99%E4%B8%80%E6%AC%BE%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E5%B7%A5%E5%85%B7%EF%BC%88%E9%99%84%E6%BA%90%E7%A0%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>认真工作不叫做赚钱，那叫做用劳动换取报酬，上班摸鱼才是真的赚钱。</p>
</blockquote>
<span id="more"></span>

<p><img src="/images/2023/02/100002.gif" alt="img"></p>
<h1 id="即时通讯工具"><a href="#即时通讯工具" class="headerlink" title="即时通讯工具"></a>即时通讯工具</h1><p>如果上班有空闲时间，最喜欢做的事情自然是和熟悉的朋友一起聊聊天，互相吐槽工作中遇到的人和事，缓解工作的压力。</p>
<p>如果直接在桌面上打开 QQ 或者微信，那目标无疑是巨大的，QQ 和微信的桌面客户端明晃晃地占据整个电脑桌面，只要有同事或者领导从你身边经过，或是在你后面看一眼，就立刻能够知道你在上班摸鱼，那场面不亚于公开处刑…… (＠_＠)</p>
<blockquote>
<p>领导：看来工作还是不饱和啊 ┑(￣Д ￣)┍</p>
</blockquote>
<p>针对这种情况，技术人自然不甘落后，总是可以想出各种方法躲避同事和领导发现你在上班摸鱼 ≡ω≡</p>
<p>思量再三，最终还是放弃了 IDEA 的各种插件，转而决定还是自己手写一款简易的即时通信工具。</p>
<p>既然要自己动手，那自然也要先对这款即时通讯工具做个简单的规划。</p>
<ul>
<li>这款即时通讯工具分为客户端和服务端的，每个用户可以使用客户端进行即时通讯。</li>
<li>通讯工具尽可能简单，只依赖于 JDK，即完全使用 Java 网络编程功能实现，不依赖其他的第三方库。</li>
<li>通讯工具不需要桌面，使用 Java 自带的 Scanner 控制台输入即可。</li>
</ul>
<p>这样一款基于 Java 网络编程的即时通讯工具，只要在 IDEA 运行客户端代码，即可在控制台与其他朋友快乐地聊天。只要不是同事或者领导贴着你的电脑屏幕观看，他绝对想不到你是在使用 IDEA 上班摸鱼聊天。</p>
<p><img src="/images/2023/02/100001.jpg" alt="img"></p>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>客户端是给使用这款即时通讯工具的用户使用的，从安全和用户体验的角度上来说，客户端应该尽可能精简，只负责发送和接受数据即可。</p>
<p>因为这是一款即时通讯工具，客户端需要做的有两件事：</p>
<ul>
<li>监听客户端的输入和发送。</li>
<li>监听服务端发送过来的消息。</li>
</ul>
<p>因为我们使用 JDK 自带的 Scanner 类来进行客户端的输入，而这个输入是一个阻塞的操作，所以我们需要创建一条额外的线程来进行服务端的监听工作。</p>
<p>客户端需要两条用户线程：</p>
<ul>
<li>main 线程用来监听客户端的输入和发送。</li>
<li>另外创建一条线程用来监听服务端的消息发送。</li>
</ul>
<p>思路已经设计好了，可以使用代码来实现了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天室客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> herenpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-07-09 12:00:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">12345</span>)) &#123;</span><br><span class="line">            <span class="comment">// 读取服务端发的消息</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; readMsg(socket)).start();</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入您的聊天室昵称：&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">chat</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">                os.write(chat.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【系统消息】聊天室炸了，BUG之神降临了&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readMsg</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> is.read(bytes);</span><br><span class="line">                System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【系统消息】你已退出聊天室，开始认真工作吧&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><p>服务端的设计比客户端要困难很多，为了便于开发和理解，我直接使用了 Java 阻塞式的网络 IO 来进行实现，即每一个客户端连接都创建一个线程来进行处理。</p>
<p>这种阻塞式的网络 IO 的<strong>好处</strong>在于便于理解和开发，而<strong>缺点</strong>也非常明显，因为这是一个通讯工具，即每一个链接都是长链接。</p>
<p>即每个客户端用户链接服务端后，都会在服务端专门有一个线程处理这个客户端相关的网络 IO 操作。如果用户量少的情况下还比较好，但是用户一旦多了起来，服务端将会创建 N 多个线程，而且在客户端不主动断开的情况下，服务器这些线程会一直占用服务器资源，服务器将会消费非常大的资源，而且很容易崩溃。</p>
<blockquote>
<p>基于这种情况，我后面也实现了一个 Java NIO 版本的客户端和服务端，在文章末尾也会一起附上源码。</p>
</blockquote>
<p><img src="/images/2023/02/100003.jpg" alt="img"></p>
<p>我将服务端的操作分为两个步骤：</p>
<h2 id="1、链接"><a href="#1、链接" class="headerlink" title="1、链接"></a>1、链接</h2><p>服务端阻塞地等待客户端的链接请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天室服务端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> herenpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-07-09 12:00:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatServer</span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 启动参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 抛出IO异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">12345</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; start(server)).start();</span><br><span class="line">        <span class="comment">// 加载配置</span></span><br><span class="line">        CHAT_CFG_RELOAD_PASSWORD = UUID.randomUUID().toString();</span><br><span class="line">        logInfo(<span class="string">&quot;【系统消息】聊天室配置加载密钥：&quot;</span> + CHAT_CFG_RELOAD_PASSWORD);</span><br><span class="line">        reloadChatCfg(args.length == <span class="number">1</span> ? args[<span class="number">0</span>] : <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        logInfo(<span class="string">&quot;【系统消息】聊天室启动成功了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务开始方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> server 服务对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(ServerSocket server)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 链接操作</span></span><br><span class="line">                <span class="type">ChatSocket</span> <span class="variable">chatSocket</span> <span class="operator">=</span> connection(server);</span><br><span class="line">                <span class="comment">// 登录操作</span></span><br><span class="line">                login(chatSocket);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logInfo(<span class="string">&quot;【系统消息】聊天室发生了异常……&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            logInfo(<span class="string">&quot;【系统消息】正在关闭聊天室资源……&quot;</span>);</span><br><span class="line">            close(server);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链接客户端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> server 服务对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ChatSocket 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ChatSocket <span class="title function_">connection</span><span class="params">(ServerSocket server)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">        <span class="type">ChatSocket</span> <span class="variable">chatSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChatSocket</span>(socket);</span><br><span class="line">        userDB.add(chatSocket);</span><br><span class="line">        sendMsgToUser(socket, <span class="string">&quot;============================\n&quot;</span> +</span><br><span class="line">                      <span class="string">&quot;1、本聊天室仅为娱乐，请勿在该聊天室内谈论敏感内容，比如涉政，涉黄，账号密码等等！\n&quot;</span> +</span><br><span class="line">                      <span class="string">&quot;2、聊天室内容明文传输，聊天信息泄露本聊天室概不负责！\n&quot;</span> +</span><br><span class="line">                      <span class="string">&quot;3、本聊天室内容后台不做任何存储，聊天信息如果需要请自行保留！\n&quot;</span> +</span><br><span class="line">                      <span class="string">&quot;4、最终解释权归本聊天室所有！\n&quot;</span> +</span><br><span class="line">                      <span class="string">&quot;============================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chatSocket;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存所有用户socket的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;ChatSocket&gt; userDB = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2、登录"><a href="#2、登录" class="headerlink" title="2、登录"></a>2、登录</h2><p>服务端获取到客户端请求后，将 <code>Socket</code> 包装为我们自定义的 <code>ChatSocket</code>，便于我们进行登录操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chatSocket ChatSocket 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(ChatSocket chatSocket)</span> &#123;</span><br><span class="line">    <span class="comment">// 给每个用户一个线程处理</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> chatSocket.getSocket();</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> readMsg(is, bytes);</span><br><span class="line">            <span class="keyword">if</span> (len == -<span class="number">1</span>) &#123;</span><br><span class="line">                logout(chatSocket);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            username = <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len);</span><br><span class="line">            chatSocket.setUsername(username);</span><br><span class="line">            <span class="comment">// 刷新配置</span></span><br><span class="line">            <span class="keyword">if</span> (CHAT_CFG_RELOAD_PASSWORD.equals(username)) &#123;</span><br><span class="line">                reloadChatCfg(is, bytes, socket);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            loginTip(username, socket);</span><br><span class="line">            <span class="comment">// 机器人欢迎</span></span><br><span class="line">            robotWelcome(username);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                len = readMsg(is, bytes);</span><br><span class="line">                <span class="keyword">if</span> (len == -<span class="number">1</span>) &#123;</span><br><span class="line">                    logout(chatSocket);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len);</span><br><span class="line">                sendMsgToOtherUser(username, socket, msg);</span><br><span class="line">                <span class="comment">// 机器人回复消息</span></span><br><span class="line">                randomRobotReply(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                logout(chatSocket);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                remove(socket);</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3、其他方法"><a href="#3、其他方法" class="headerlink" title="3、其他方法"></a>3、其他方法</h2><h3 id="3-1、读取客户端的消息"><a href="#3-1、读取客户端的消息" class="headerlink" title="3.1、读取客户端的消息"></a>3.1、读取客户端的消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取消息的方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> is    输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bytes 字节数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 读取的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">readMsg</span><span class="params">(InputStream is, <span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        len = is.read(bytes);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-2、给客户端发送消息"><a href="#3-2、给客户端发送消息" class="headerlink" title="3.2、给客户端发送消息"></a>3.2、给客户端发送消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给所有的用户发送系统消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> msg 系统消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException 抛出异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendSysMsg</span><span class="params">(String msg)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">for</span> (ChatSocket chatSocket : userDB) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sysMsg</span> <span class="operator">=</span> getCurrentTime() + <span class="string">&quot;\n&quot;</span> + msg + <span class="string">&quot;\n&quot;</span> + chatSeparate;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> chatSocket.getSocket();</span><br><span class="line">        sendMsgToUser(socket, sysMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息给其他用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username 消息发送用户名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> self     消息发送的用户socket</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> msg      消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException 抛出异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMsgToOtherUser</span><span class="params">(String username, Socket self, String msg)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">for</span> (ChatSocket chatSocket : userDB) &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> chatSocket.getSocket();</span><br><span class="line">        <span class="keyword">if</span> (socket.equals(self)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sendMsg</span> <span class="operator">=</span> <span class="string">&quot;（&quot;</span> + username + <span class="string">&quot;） &quot;</span> + getCurrentTime() + <span class="string">&quot;\n&quot;</span> + msg + <span class="string">&quot;\n&quot;</span> + chatSeparate;</span><br><span class="line">        sendMsgToUser(socket, sendMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给指定的用户发送消息，文本消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> socket  消息发送的用户socket</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sendMsg 消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException 抛出异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMsgToUser</span><span class="params">(Socket socket, String sendMsg)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">    os.write(sendMsg.getBytes());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-3、日志记录"><a href="#3-3、日志记录" class="headerlink" title="3.3、日志记录"></a>3.3、日志记录</h3><p>虽然服务端不需要记录用户的聊天信息，但是还是需要记录一些服务器的日志信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印日志</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message 日志信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">logInfo</span><span class="params">(String message)</span> &#123;</span><br><span class="line">    System.out.println(getCurrentDateTime() + <span class="string">&quot; &quot;</span> + message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-4、工具集合"><a href="#3-4、工具集合" class="headerlink" title="3.4、工具集合"></a>3.4、工具集合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前在线的所有玩家名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 当前在线的所有玩家名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getLoginUsernames</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userDB.stream().map(ChatSocket::getUsername).filter(Objects::nonNull).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断时间是否是 11:00 - 04:59 晚上</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是返回true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNight</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">    <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> calendar.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">    <span class="keyword">return</span> hour &gt;= <span class="number">23</span> || hour &lt;= <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间格式化对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SimpleDateFormat</span> <span class="variable">timeSdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SimpleDateFormat</span> <span class="variable">DateTimeSdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前的时间的格式化字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 当前的时间的格式化字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> String <span class="title function_">getCurrentTime</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> timeSdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前的日期时间的格式化字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 当前的日期时间的格式化字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> String <span class="title function_">getCurrentDateTime</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> DateTimeSdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断一个字符串是否为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string 字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 为空返回true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(String string)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> string == <span class="literal">null</span> || string.length() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断一个字符串是否不为空</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string 字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 不为空返回true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNotEmpty</span><span class="params">(String string)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !isEmpty(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-5、ChatSocket"><a href="#3-5、ChatSocket" class="headerlink" title="3.5、ChatSocket"></a>3.5、ChatSocket</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装的 ChatSocket</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ChatSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChatSocket</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Socket <span class="title function_">getSocket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="服务端部署"><a href="#服务端部署" class="headerlink" title="服务端部署"></a>服务端部署</h1><p>为了方便在服务器上运行服务端代码，我还特意写了一个 <code>Shell</code> 脚本用来处理服务端代码的运行、停止、重启、查找等操作。</p>
<p><img src="/images/2023/02/100005.gif" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CHAT_SERVER_DIR=/usr/app/chat</span><br><span class="line">CHAT_SERVER=ChatServer</span><br><span class="line">CHAT_LOG_FILE=$&#123;CHAT_SERVER_DIR&#125;/chat.log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">聊天室启动参数</span></span><br><span class="line">CHAT_CFG=$&#123;2&#125;</span><br><span class="line"></span><br><span class="line">help() &#123;</span><br><span class="line">	echo &quot;==================&quot;</span><br><span class="line">	echo &quot;start 启动服务&quot;</span><br><span class="line">	echo &quot;stop 停止服务&quot;</span><br><span class="line">	echo &quot;restart 重启服务&quot;</span><br><span class="line">	echo &quot;find 查找服务&quot;</span><br><span class="line">	echo &quot;help 帮助&quot;</span><br><span class="line">	echo &quot;==================&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start() &#123;</span><br><span class="line">	javac -encoding UTF-8 $&#123;CHAT_SERVER&#125;\.java</span><br><span class="line">	nohup java -Dfile.encoding=UTF-8 $&#123;CHAT_SERVER&#125; $&#123;CHAT_CFG&#125; &gt;&gt;$&#123;CHAT_LOG_FILE&#125; 2&gt;&amp;1 &amp;</span><br><span class="line">	echo &quot;服务$&#123;CHAT_SERVER&#125;已启动&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop() &#123;</span><br><span class="line">	PID=$(ps -ef | grep java | grep ChatServer | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">	if [ &quot;$&#123;PID&#125;&quot; == &quot;&quot; ]</span><br><span class="line">	then</span><br><span class="line">		echo &quot;服务$&#123;CHAT_SERVER&#125;已停止&quot;</span><br><span class="line">	else</span><br><span class="line">		kill $&#123;PID&#125;</span><br><span class="line">		echo &quot;服务$&#123;CHAT_SERVER&#125;已停止&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">restart() &#123;</span><br><span class="line">  stop</span><br><span class="line">	sleep 3</span><br><span class="line">	start</span><br><span class="line">	echo &quot;服务$&#123;CHAT_SERVER&#125;已重启&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">find() &#123;</span><br><span class="line">  PID=$(ps -ef | grep java | grep ChatServer | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">  if [ &quot;$&#123;PID&#125;&quot; == &quot;&quot; ]</span><br><span class="line">	then</span><br><span class="line">		echo &quot;服务$&#123;CHAT_SERVER&#125;已停止&quot;</span><br><span class="line">	else</span><br><span class="line">		echo &quot;服务$&#123;CHAT_SERVER&#125;正在运行：PID=$&#123;PID&#125;&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $&#123;1&#125; in</span><br><span class="line">	&quot;&quot;)</span><br><span class="line">		echo &quot;=== 参数错误 ===&quot;</span><br><span class="line">		;;</span><br><span class="line">	start)</span><br><span class="line">		start</span><br><span class="line">		;;</span><br><span class="line">	stop)</span><br><span class="line">		stop</span><br><span class="line">		;;</span><br><span class="line">	restart)</span><br><span class="line">		restart</span><br><span class="line">		;;</span><br><span class="line">	find)</span><br><span class="line">		find</span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		help</span><br><span class="line">		;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>



<h1 id="优点与缺点"><a href="#优点与缺点" class="headerlink" title="优点与缺点"></a>优点与缺点</h1><p><strong>优点</strong></p>
<ul>
<li>简单便捷，无论是客户端还是服务端，都只依赖了 JDK 的环境，没有任何第三方依赖，客户端的代码只在复制到有 JDK 环境的电脑上即可运行，方便快捷。</li>
<li>足够隐蔽，客户端在 CMD 或者 IDEA 环境下都可以运行，这样你身边的同事只要不仔细观察你的电脑屏幕，绝对想不到你是在和朋友聊天，只以为你是在认真工作。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>服务端基于阻塞式网络 IO 开发，服务端只能够承受有限个的客户端链接。（Java NIO 版本可以解决这个缺点）</li>
<li>太过简陋，因为只是单纯地进行网络 IO 的写入和读取，所以对于一些复杂的网络环境问题都没有进行处理，比如网络黏包的问题，在客户端连接较多的情况下，可能会发生网络黏包的问题，导致一些消息粘黏在一起，发送给客户端。</li>
<li>需要一个服务器，因为这款即使通讯工具是 CS 模式，需要一个服务器运行服务端代码。</li>
</ul>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>虽然这款即时通讯工具确实还不够完善，但是如果只是用于几个朋友之间简单地进行聊天，这款即时通讯工具还是非常给力的。</p>
<p>这款即时通讯工具的源代码已经被托管到了 GitHub 上，同时还附带了这款即时通讯工具的 Java NIO 版本，有兴趣的同学的可以访问我的 GitHub 下载源码。</p>
<blockquote>
<p>GitHub：<a href="https://github.com/herenpeng/chat.git">https://github.com/herenpeng/chat.git</a></p>
</blockquote>
<p>同时，我还在 Gitee 上提供了仓库镜像。</p>
<blockquote>
<p>Gitee：<a href="https://gitee.com/herenpeng/chat.git">https://gitee.com/herenpeng/chat.git</a></p>
</blockquote>
<p>如果你喜欢这款即时通讯工具，希望各位同学可以给我的 GitHub 或者 Gitee 仓库点一个 <code>Star</code>，非常感谢！</p>
<p><img src="/images/2023/02/100004.gif" alt="img"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>低代码开发，手写一款代码生成工具</title>
    <url>/2021/08/11/%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%EF%BC%8C%E6%89%8B%E5%86%99%E4%B8%80%E6%AC%BE%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote>
<p>低代码平台的一个核心就是，使用可视化的操作，生成项目系统中的非核心代码，从而大大降低了重复代码的编写工作，使开发者们可以更加专注于核心代码和业务功能的设计和开发工作。</p>
</blockquote>
<span id="more"></span>

<h1 id="低代码平台"><a href="#低代码平台" class="headerlink" title="低代码平台"></a>低代码平台</h1><p>低代码平台有很多，强大的低代码平台基本上可以通过可视化操作来编写简单的业务逻辑，而一些简单的低代码平台主要是用来生成一些通用的 CRUD 操作，我们今天要写的就是一款比较简单的低代码平台，主要生成一些通用的后端 CRUD 操作，当然，也可以生成一些简单的前端数据管理页面等等。</p>
<p>低代码平台的主要思路是，以数据库表结构为基础，获取数据库表的结构信息，从而生成后端对应的领域模型以及 CRUD 操作。</p>
<p>本篇博客中，所有的功能都是基于 SpringBoot 的，所以在最开始，我们需要引入 SpringBoot 相关的依赖，数据库使用 MySQL，数据库操作使用 MyBatisPlus，所以在阅读本篇博客之前，我希望阅读的朋友对于这些相关的知识已经有所了解。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC的启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MySQL数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MyBatis-Plus的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>其实低代码平台的本质就是一个模板操作，将数据库表的结构信息填入对应的模板中，即可根据模板内容生成对应的模板页面。</p>
<p>说到模板生成，其实 JSP 技术本质上就是一种模板，JavaEE 服务器将数据信息填入 JSP 模板中，从而生成对应的 HTML 静态页面，然后响应给前端。</p>
<p>当然，目前的 Java 技术生态圈中，JSP 是一种比较老旧的技术了，学习和使用价值都不算太高，所以今天的低代码平台并不使用 JSP 技术来作为通用模板，而是使用 FreeMarker 模板引擎作为模板工具。</p>
<h2 id="FreeMarker模板"><a href="#FreeMarker模板" class="headerlink" title="FreeMarker模板"></a>FreeMarker模板</h2><p>既然要使用 FreeMarker 模板引擎作为模板工具，自然需要对 FreeMarker 技术有所了解。</p>
<p>我们来看一下 FreeMarker 中文官方参考手册的描述：</p>
<blockquote>
<p>FreeMarker 是一款 <em>模板引擎</em>： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。</p>
</blockquote>
<p>简而言之，FreeMarker 就是一款类似于 JSP 的模板工具，但是比起 JSP 来，FreeMarker 效率更高，使用更加方便简单。</p>
<p>如果需要使用 FreeMarker 技术，SpringBoot 中已经为我们集成了 FreeMarker 模板引擎，我们在已经引入 SpringBoot 的前提下，只需要再引入 FreeMarker 的依赖即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>可以先简单封装一下 FreeMarker 模板引擎的模板生成功能，使得我们可以在后面更加简便地使用 FreeMarker 模板引擎。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeMarkerUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板渲染并返回内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object             模板参数对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateLoaderPath FreeMarker模板文件加载路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ftlFileName        FreeMarker模板文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> FreeMarker模板内容内容字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTemplateContent</span><span class="params">(<span class="keyword">final</span> Object object, <span class="keyword">final</span> String templateLoaderPath, <span class="keyword">final</span> String ftlFileName)</span> &#123;</span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);</span><br><span class="line">            cfg.setClassForTemplateLoading(FreeMarkerUtils.class, templateLoaderPath);</span><br><span class="line">            cfg.setDefaultEncoding(EncodingEnums.UTF_8.getValue());</span><br><span class="line">            <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> cfg.getTemplate(ftlFileName);</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">            template.process(object, out);</span><br><span class="line">            <span class="keyword">return</span> out.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">&quot;[freemarker工具类]FreeMarker读取模板文件异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    out.flush();</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    log.error(<span class="string">&quot;[freemarker工具类]FreeMarker读取模板文件输出流关闭异常&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="数据库表结构信息"><a href="#数据库表结构信息" class="headerlink" title="数据库表结构信息"></a>数据库表结构信息</h2><p>表结构信息是低代码平台的基础信息，其他的信息都是从表结构信息延伸出来的。</p>
<p>在获取表结构信息上，需要解决几个问题。</p>
<ul>
<li>怎么获取数据库源对应的表信息。</li>
<li>怎么获取数据库表对应的字段信息。</li>
</ul>
<p>其实数据库的表结构信息，也是存储在数据库表中的。这些信息存储在 MySQL 数据库默认的数据库 <code>information_schema</code> 中，我们可以使用 SQL 语句查询出当前使用的数据库的所有表信息。</p>
<p><img src="/images/2023/02/200001.png" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> table_name <span class="keyword">as</span> name,table_comment <span class="keyword">as</span> comment</span><br><span class="line"><span class="keyword">from</span> information_schema.tables</span><br><span class="line"><span class="keyword">where</span> table_schema <span class="operator">=</span> (<span class="keyword">select</span> database())</span><br></pre></td></tr></table></figure>

<ul>
<li>查询结果</li>
</ul>
<table>
<thead>
<tr>
<th>name</th>
<th>comment</th>
</tr>
</thead>
<tbody><tr>
<td>数据库表名称</td>
<td>数据库表注释信息</td>
</tr>
</tbody></table>
<p>同理，我们也可以用同样的方式获取数据库表字段的具体信息。</p>
<p><img src="/images/2023/02/200002.png" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">as</span> name, ordinal_position <span class="keyword">as</span> sort,</span><br><span class="line">column_comment <span class="keyword">as</span> comment, data_type <span class="keyword">as</span> database_type</span><br><span class="line"><span class="keyword">from</span> information_schema.columns</span><br><span class="line"><span class="keyword">where</span> table_schema <span class="operator">=</span> (<span class="keyword">select</span> database())</span><br><span class="line"><span class="keyword">AND</span> table_name <span class="operator">=</span> <span class="string">&#x27;auth_role&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ordinal_position;</span><br></pre></td></tr></table></figure>

<ul>
<li>查询结果</li>
</ul>
<table>
<thead>
<tr>
<th>name</th>
<th>sort</th>
<th>comment</th>
<th>database_type</th>
</tr>
</thead>
<tbody><tr>
<td>表字段名称</td>
<td>表字段排序</td>
<td>表字段注释信息</td>
<td>表字段数据库类型</td>
</tr>
</tbody></table>
<h2 id="命名风格转换"><a href="#命名风格转换" class="headerlink" title="命名风格转换"></a>命名风格转换</h2><p>在 Java 代码中，我们一般会使用遵循 Java 代码规范的驼峰命名法，而在数据库中，则使用下划线命名法，即各个词语之间使用下划线隔开。驼峰命名法和下划线命名法都是遵循一定规范的命名方式，两者之间的命名风格可以相互转换。</p>
<p>如果数据库的命名和 Java 代码的命名都遵循一定的规范，那么可以使用命名风格转换工具，将数据库的名称信息自动转换为 Java 代码风格的名称。</p>
<p>当然，如果命名确实不具备相同的规范，无法自动转换，也可以考虑使用在可视化编程界面，由低代码平台的使用者自己对命名名称进行手动修正。</p>
<ul>
<li>命名风格转换工具</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 命名风格转换工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> herenpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-11-15 15:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CamelCaseUtils</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下划线分隔符 Underscore</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">char</span> <span class="variable">UNDERSCORE_SEPARATOR</span> <span class="operator">=</span> <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下划线命名，转换为小驼峰命名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string 下划线命名名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 小驼峰命名名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toCamelCase</span><span class="params">(String string)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(string)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string = string.toLowerCase();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(string.length());</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">upperCase</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; string.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> string.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (ch == UNDERSCORE_SEPARATOR) &#123;</span><br><span class="line">                upperCase = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (upperCase) &#123;</span><br><span class="line">                sb.append(Character.toUpperCase(ch));</span><br><span class="line">                upperCase = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>从数据库中只能获取数据库表字段的数据类型，而在 Java 代码中，我们使用的是 Java 数据类型，在 MyBatisPlus 中，我们一般还会使用 jdbcType，为了能够把数据库类型转换为 Java 类型和 jdbcType，需要我们在后台对这三者直接的关系进行映射，从而实现数据库类型转换为 Java 类型和 jdbcType 类型。</p>
<ul>
<li>数据库类型映射</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据类型常量，能够通过数据库类型映射为JDBC类型和JAVA类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> herenpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-11-12 23:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataBaseTypeConst</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; jdbcTypeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; javaTypeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        initJdbcTypeMap();</span><br><span class="line">        initJavaTypeMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化数据库类型和Jdbc类型的映射关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initJdbcTypeMap</span><span class="params">()</span> &#123;</span><br><span class="line">        jdbcTypeMap.put(<span class="string">&quot;int&quot;</span>, <span class="string">&quot;INTEGER&quot;</span>);</span><br><span class="line">        jdbcTypeMap.put(<span class="string">&quot;bigint&quot;</span>, <span class="string">&quot;BIGINT&quot;</span>);</span><br><span class="line">        jdbcTypeMap.put(<span class="string">&quot;char&quot;</span>, <span class="string">&quot;CHAR&quot;</span>);</span><br><span class="line">        jdbcTypeMap.put(<span class="string">&quot;varchar&quot;</span>, <span class="string">&quot;VARCHAR&quot;</span>);</span><br><span class="line">        jdbcTypeMap.put(<span class="string">&quot;datetime&quot;</span>, <span class="string">&quot;TIMESTAMP&quot;</span>);</span><br><span class="line">        jdbcTypeMap.put(<span class="string">&quot;timestamp&quot;</span>, <span class="string">&quot;TIMESTAMP&quot;</span>);</span><br><span class="line">        jdbcTypeMap.put(<span class="string">&quot;date&quot;</span>, <span class="string">&quot;DATE&quot;</span>);</span><br><span class="line">        jdbcTypeMap.put(<span class="string">&quot;time&quot;</span>, <span class="string">&quot;TIME&quot;</span>);</span><br><span class="line">        jdbcTypeMap.put(<span class="string">&quot;tinyint&quot;</span>, <span class="string">&quot;BOOLEAN&quot;</span>);</span><br><span class="line">        jdbcTypeMap.put(<span class="string">&quot;decimal&quot;</span>, <span class="string">&quot;DECIMAL&quot;</span>);</span><br><span class="line">        jdbcTypeMap.put(<span class="string">&quot;numeric&quot;</span>, <span class="string">&quot;NUMERIC&quot;</span>);</span><br><span class="line">        jdbcTypeMap.put(<span class="string">&quot;float&quot;</span>, <span class="string">&quot;FLOAT&quot;</span>);</span><br><span class="line">        jdbcTypeMap.put(<span class="string">&quot;double&quot;</span>, <span class="string">&quot;DOUBLE&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化数据库类型和Java类型的映射关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initJavaTypeMap</span><span class="params">()</span> &#123;</span><br><span class="line">        javaTypeMap.put(<span class="string">&quot;int&quot;</span>, <span class="string">&quot;Integer&quot;</span>);</span><br><span class="line">        javaTypeMap.put(<span class="string">&quot;bigint&quot;</span>, <span class="string">&quot;Long&quot;</span>);</span><br><span class="line">        javaTypeMap.put(<span class="string">&quot;char&quot;</span>, <span class="string">&quot;String&quot;</span>);</span><br><span class="line">        javaTypeMap.put(<span class="string">&quot;varchar&quot;</span>, <span class="string">&quot;String&quot;</span>);</span><br><span class="line">        javaTypeMap.put(<span class="string">&quot;datetime&quot;</span>, <span class="string">&quot;Date&quot;</span>);</span><br><span class="line">        javaTypeMap.put(<span class="string">&quot;timestamp&quot;</span>, <span class="string">&quot;Date&quot;</span>);</span><br><span class="line">        javaTypeMap.put(<span class="string">&quot;date&quot;</span>, <span class="string">&quot;Date&quot;</span>);</span><br><span class="line">        javaTypeMap.put(<span class="string">&quot;time&quot;</span>, <span class="string">&quot;Date&quot;</span>);</span><br><span class="line">        javaTypeMap.put(<span class="string">&quot;tinyint&quot;</span>, <span class="string">&quot;Boolean&quot;</span>);</span><br><span class="line">        javaTypeMap.put(<span class="string">&quot;decimal&quot;</span>, <span class="string">&quot;BigDecimal&quot;</span>);</span><br><span class="line">        javaTypeMap.put(<span class="string">&quot;numeric&quot;</span>, <span class="string">&quot;BigDecimal&quot;</span>);</span><br><span class="line">        javaTypeMap.put(<span class="string">&quot;float&quot;</span>, <span class="string">&quot;Double&quot;</span>);</span><br><span class="line">        javaTypeMap.put(<span class="string">&quot;double&quot;</span>, <span class="string">&quot;Double&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库类型对应的JDBC类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> databaseType 数据库类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JDBC类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getJdbcType</span><span class="params">(String databaseType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTypeMap.get(databaseType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库类型对应的Java类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> databaseType 数据库类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Java类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getJavaType</span><span class="params">(String databaseType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> javaTypeMap.get(databaseType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>代码生成需要两部分数据：</p>
<ul>
<li>第一部分是代码模板，代码模板是固定的代码，在后台以 FreeMarker 的形式存在后台中。</li>
<li>第二部分是代码模板参数，代码模板参数是可变的，在代码生成中，代码模板参数就是数据库表信息和数据库字段信息，以及由数据库延伸出来的 Java 名称信息。</li>
</ul>
<h3 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h3><p>代码模板由 FreeMarker 技术开发，例如实体类的代码模板，名称是 <code>entity.ftlh</code>，模板内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;javaPackageName&#125;.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.afterturn.easypoi.excel.annotation.Excel;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.SqlCondition;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.zero.common.base.entity.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line">&lt;#<span class="type">assign</span> <span class="variable">HasBigDecimal</span> <span class="operator">=</span> <span class="literal">true</span>&gt;</span><br><span class="line">&lt;#<span class="type">assign</span> <span class="variable">HasDate</span> <span class="operator">=</span> <span class="literal">true</span>&gt;</span><br><span class="line">&lt;#list tableColumnList as column&gt;</span><br><span class="line">    &lt;#<span class="keyword">if</span> column.javaType == <span class="string">&quot;BigDecimal&quot;</span> &amp;&amp; HasBigDecimal&gt;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line">    &lt;#<span class="type">assign</span> <span class="variable">HasBigDecimal</span> <span class="operator">=</span> <span class="literal">false</span>&gt;</span><br><span class="line">    &lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;#<span class="keyword">if</span> column.javaType == <span class="string">&quot;Date&quot;</span> &amp;&amp; HasDate &amp;&amp; column.name != <span class="string">&quot;create_time&quot;</span> &amp;&amp; column.name != <span class="string">&quot;update_time&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">    &lt;#<span class="type">assign</span> <span class="variable">HasDate</span> <span class="operator">=</span> <span class="literal">false</span>&gt;</span><br><span class="line">    &lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/#list&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $&#123;comment&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $&#123;codeAuthor&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> $&#123;.now?string(&quot;yyyy-MM-dd HH:mm&quot;)&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;$&#123;comment&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;entityName&#125; <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">&lt;#list tableColumnList as column&gt;</span><br><span class="line">&lt;#<span class="keyword">if</span> column.name != <span class="string">&quot;id&quot;</span> &amp;&amp; column.name != <span class="string">&quot;create_time&quot;</span> &amp;&amp; column.name != <span class="string">&quot;create_user_id&quot;</span> &amp;&amp; column.name != <span class="string">&quot;update_time&quot;</span> &amp;&amp; column.name != <span class="string">&quot;update_user_id&quot;</span> &amp;&amp; column.name != <span class="string">&quot;deleted&quot;</span>&gt;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * $&#123;column.comment&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;$&#123;column.comment&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;$&#123;column.comment&#125;&quot;, width = 15, needMerge = true)</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;$&#123;column.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> $&#123;column.javaType&#125; $&#123;column.javaName&#125;;</span><br><span class="line">&lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/#list&gt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="代码模板参数"><a href="#代码模板参数" class="headerlink" title="代码模板参数"></a>代码模板参数</h3><p>代码模板参数都是由数据库相关的信息延伸出来的，主要分为数据库表信息和数据库表字段信息。</p>
<ul>
<li>TableInfo</li>
</ul>
<blockquote>
<p>这里的 TableInfo 有一部分信息是和前端 vue 相关的，如果有不需要可以根据自己的需求进行代码改造。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统数据库表信息实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> herenpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-11-08 10:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;dev_table_info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TableInfo</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表注释</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;comment&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String comment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表名对应的实体类名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;entity_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String entityName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表名对应的实体类Controller请求路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;request_mapping&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String requestMapping;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Java包前缀名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;java_package_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String javaPackageName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Java代码生成路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;java_code_path&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String javaCodePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Vue代码生成路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;vue_code_path&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String vueCodePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Vue包路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;vue_package&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String vuePackage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码作者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;code_author&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String codeAuthor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库表的字段信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;TableColumn&gt; tableColumnList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>TableColumn</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统数据库表字段信息实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> herenpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-11-11 23:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;dev_table_column&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TableColumn</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库表字段名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Java属性名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;java_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String javaName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库表字段注释</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;comment&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String comment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库表字段类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;database_type&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String databaseType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库表字段对应的JDBC类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;jdbc_type&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String jdbcType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库表字段对应的JAVA类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;java_type&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String javaType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为查询字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;query&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean query;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库表字段排序顺序，数据库默认升序排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;sort&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表信息主键，关联dev_table_info表的主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;table_info_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer tableInfoId;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模板类型枚举"><a href="#模板类型枚举" class="headerlink" title="模板类型枚举"></a>模板类型枚举</h3><p>为了能够区分不同的模板，以及不同模板之前的一些固定参数，我们可以写一些枚举类型，对这些不同模板的固定参数进行定义。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码类型，后续可以添加一些其他类型的代码，比如 VUE</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> herenpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-03-29 20:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">CodeTypeEnum</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Java代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    JAVA;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FreeMarker模板文件相关枚举</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> herenpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-11-15 13:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">TemplateEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实体类相关信息枚举</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ENTITY(CodeTypeEnum.JAVA,</span><br><span class="line">            <span class="string">&quot;/templates/java&quot;</span>,</span><br><span class="line">            <span class="string">&quot;entity.ftlh&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/src/main/java&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.entity&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.java&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Mapper层接口相关信息枚举</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MAPPER(CodeTypeEnum.JAVA,</span><br><span class="line">            <span class="string">&quot;/templates/java&quot;</span>,</span><br><span class="line">            <span class="string">&quot;mapper.ftlh&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/src/main/java&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.mapper&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Mapper&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.java&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Mapper层XML文件相关信息枚举</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MAPPER_XML(CodeTypeEnum.JAVA,</span><br><span class="line">            <span class="string">&quot;/templates/resources&quot;</span>,</span><br><span class="line">            <span class="string">&quot;mapperXml.ftlh&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/src/main/resources&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.mapper&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Mapper&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.xml&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service层接口相关信息枚举</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SERVICE(CodeTypeEnum.JAVA,</span><br><span class="line">            <span class="string">&quot;/templates/java&quot;</span>,</span><br><span class="line">            <span class="string">&quot;service.ftlh&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/src/main/java&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.service&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Service&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.java&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service层接口实现类相关信息枚举</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SERVICE_IMPL(CodeTypeEnum.JAVA,</span><br><span class="line">            <span class="string">&quot;/templates/java&quot;</span>,</span><br><span class="line">            <span class="string">&quot;serviceImpl.ftlh&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/src/main/java&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.service.impl&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ServiceImpl&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.java&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Controller层相关信息枚举</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CONTROLLER(CodeTypeEnum.JAVA,</span><br><span class="line">            <span class="string">&quot;/templates/java&quot;</span>,</span><br><span class="line">            <span class="string">&quot;controller.ftlh&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/src/main/java&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.controller&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Controller&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.java&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CodeTypeEnum codeTypeEnum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板文件加载路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String templateLoaderPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FreeMarker模板文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String ftlTemplateFile;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件基本生成路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String fileBasePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String packageName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称后缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件后缀名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String fileSuffix;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h3><p>拥有代码模板和代码模板参数之后，就可以使用之前写的 FreeMarkerUtils 直接生成代码，不过为了方便使用，我们可以再一次包装一个 CodeGenerationUtils 工具类。后续我们只需要调用 CodeGenerationUtils  工具类的 <code>generation</code> 方法即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码生成工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> herenpeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-11-11 22:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerationUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TableInfoMapper tableInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TableColumnMapper tableColumnMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FreeMarkerUtils freeMarkerUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码生成方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 表信息主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generation</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TableInfo</span> <span class="variable">tableInfo</span> <span class="operator">=</span> tableInfoMapper.selectById(id);</span><br><span class="line">        List&lt;TableColumn&gt; tableColumnList = tableColumnMapper.getByTableInfoId(tableInfo.getId());</span><br><span class="line">        tableInfo.setTableColumnList(tableColumnList);</span><br><span class="line">        generationFile(tableInfo, TemplateEnum.ENTITY);</span><br><span class="line">        generationFile(tableInfo, TemplateEnum.MAPPER);</span><br><span class="line">        generationFile(tableInfo, TemplateEnum.SERVICE);</span><br><span class="line">        generationFile(tableInfo, TemplateEnum.SERVICE_IMPL);</span><br><span class="line">        generationFile(tableInfo, TemplateEnum.CONTROLLER);</span><br><span class="line">        generationFile(tableInfo, TemplateEnum.MAPPER_XML);</span><br><span class="line">        <span class="comment">// 生成前端代码</span></span><br><span class="line">        generationFile(tableInfo, TemplateEnum.VUE);</span><br><span class="line">        generationFile(tableInfo, TemplateEnum.API);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过模板文件生成对应的文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableInfo    表信息，需要在模板文件中渲染的内容信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templateEnum 需要生成的文件类型枚举，其中含有对应的生成信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException IO异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">generationFile</span><span class="params">(TableInfo tableInfo, TemplateEnum templateEnum)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 拼接文件的全路径</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">generationFilePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">CodeTypeEnum</span> <span class="variable">codeTypeEnum</span> <span class="operator">=</span> templateEnum.getCodeTypeEnum();</span><br><span class="line">        <span class="keyword">switch</span> (codeTypeEnum) &#123;</span><br><span class="line">            <span class="keyword">case</span> JAVA:</span><br><span class="line">                <span class="comment">// 拼接文件的全路径</span></span><br><span class="line">                generationFilePath.append(tableInfo.getJavaCodePath()).append(templateEnum.getFileBasePath())</span><br><span class="line">                        .append(packageNameToPath(tableInfo.getJavaPackageName() + templateEnum.getPackageName()))</span><br><span class="line">                        .append(File.separator).append(tableInfo.getEntityName()).append(templateEnum.getSuffix())</span><br><span class="line">                        .append(templateEnum.getFileSuffix());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                log.error(<span class="string">&quot;[代码生成工具]系统当前不支持&#123;&#125;类型的代码生成功能&quot;</span>, codeTypeEnum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> freeMarkerUtils.getTemplateContent(tableInfo, templateEnum.getTemplateLoaderPath(), templateEnum.getFtlTemplateFile());</span><br><span class="line">        <span class="type">File</span> <span class="variable">generationFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(generationFilePath.toString());</span><br><span class="line">        generationFile.getParentFile().mkdirs();</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(generationFile), EncodingEnums.UTF_8.getValue());</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(out);</span><br><span class="line">        writer.write(content);</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将包名转换为文件路径名，并在包文件路径的前后拼接上文件路径分隔符号</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packageName 包名转</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件路径名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">packageNameToPath</span><span class="params">(String packageName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> File.separator + packageName.replace(StringConst.POINT, File.separator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="可视化效果"><a href="#可视化效果" class="headerlink" title="可视化效果"></a>可视化效果</h2><ul>
<li>代码生成</li>
</ul>
<p><img src="/images/2023/02/200003.png" alt="img"></p>
<ul>
<li>表信息配置</li>
</ul>
<p><img src="/images/2023/02/200004.png" alt="img"></p>
<ul>
<li>表字段配置</li>
</ul>
<p><img src="/images/2023/02/200005.png" alt="img"></p>
<h1 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h1><p><strong>优点</strong></p>
<ul>
<li>使用便捷，开发者可以使用这款低代码工具生成简单重复的代码。</li>
<li>代码简单，开发者可以根据自己的需求，对这款低代码工具进行定制化的修改。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>功能单一，相比较其他成熟的低代码平台，这款低代码工具的功能还是比较单一的，无法承担比较复杂的业务场景。</li>
<li>不支持多表关联，这款低代码工具目前只支持单表代码生成。</li>
</ul>
<blockquote>
<p>有兴趣的小伙伴可以基于这个的基础上，对这款低代码工具进行扩展和升级，增加更多复杂，更加强大的功能。</p>
</blockquote>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这款低代码平台能够生成简单的 Java 和前端代码，对于基础的增删改查可以直接生成，开发者只需要在这个基础上进行一些简单的修改，这些代码就可以立即生效，从而大大节省开发者的时间，让开发者从无意义的重复代码中解放出来。</p>
<p>这款低代码工具其实是我的开源项目 <code>zero-admin</code> 下的一个子模块 <code>zero-dev</code> ，这款低代码工具的所有的源码都在该模块中，有兴趣的可以前往我的 GitHub 进行相关的了解。</p>
<blockquote>
<p>GitHub：<a href="https://github.com/herenpeng/zero-admin.git">https://github.com/herenpeng/zero-admin.git</a></p>
</blockquote>
<p>同时，我还在 Gitee 上提供了仓库镜像。</p>
<blockquote>
<p>Gitee：<a href="https://gitee.com/herenpeng/zero-admin.git">https://gitee.com/herenpeng/zero-admin.git</a></p>
</blockquote>
<p>如果你喜欢这款低代码工具，希望各位同学可以给我的 GitHub 或者 Gitee 仓库点一个 <code>Star</code>，非常感谢！</p>
<p><img src="/images/2023/02/200004.gif" alt="img"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法-排序算法辅助工具编写与三种基本排序算法（Java实现）</title>
    <url>/2020/04/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7%E7%BC%96%E5%86%99%E4%B8%8E%E4%B8%89%E7%A7%8D%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/</url>
    <content><![CDATA[<p><strong>一、排序算法辅助工具类：</strong></p>
<ol>
<li>随机生成一个整形数组</li>
<li>生成一个近乎有序的整形数组</li>
<li>判断一个数组是否有序，有序返回true，无序返回false<span id="more"></span></li>
<li>拷贝一个整形数组</li>
<li>交换数组中的两个索引的位置</li>
<li>打印数组</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortTestUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 	随机生成一个整形数组</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> size		数组大小</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> rangeL	数组左边范围（包含）</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> rangeR	数组右边范围（包含）</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] generateRandomArray(<span class="type">int</span> size,<span class="type">int</span> rangeL,<span class="type">int</span> rangeR) &#123;</span><br><span class="line">		<span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; size;i++) &#123;</span><br><span class="line">			arr[i] = (<span class="type">int</span>) (Math.random() * (rangeR-rangeL+<span class="number">1</span>)) + rangeL;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> arr;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 生成一个近乎有序的整形数组</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> size		数组大小</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> swapTimes	将有序数组打乱次数</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] generateAlmostOrderlyArray(<span class="type">int</span> size,<span class="type">int</span> swapTimes) &#123;</span><br><span class="line">		<span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;size;i++) &#123;</span><br><span class="line">			arr[i] = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; swapTimes;i++) &#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> (<span class="type">int</span>) Math.random()*size;</span><br><span class="line">			<span class="type">int</span> <span class="variable">index2</span> <span class="operator">=</span> (<span class="type">int</span>) Math.random()*size;</span><br><span class="line">			swap(arr,index1,index2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> arr;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 判断一个数组是否有序，有序返回true，无序返回false</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> arr	整形数组</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isOrderly</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i &lt; arr.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i] &gt; arr[i+<span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 拷贝一个整形数组</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> arr	整形数组</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] copyIntArray(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">		<span class="type">int</span>[] copyArr = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length; i++) &#123;</span><br><span class="line">			copyArr[i] = arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> copyArr;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 交换数组中的两个索引的位置</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> arr	整形数组</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> i		第一个索引</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> j		第二个索引</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">		arr[i] = arr[j];</span><br><span class="line">		arr[j] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 	打印数组</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> arr	整形数组</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">			System.out.print(i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>二、三种基本排序算法：</strong></p>
<ol>
<li>冒泡排序</li>
<li>选择排序</li>
<li>插入排序</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr	整形数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr.length-<span class="number">1</span>;j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[j+<span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">				SortTestUtils.swap(arr, j+<span class="number">1</span>, j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> * 		-选择一个最小的数，插入最左边</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr	整形数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>;j &lt; arr.length;j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[j] &lt; arr[min]) &#123;</span><br><span class="line">				min = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		SortTestUtils.swap(arr, i, min);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> * 		-随机选一个数，插入到合适的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr	整形数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">insertValue</span> <span class="operator">=</span> arr[i];</span><br><span class="line">		<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(j = i;j &gt; <span class="number">0</span> &amp;&amp; arr[j-<span class="number">1</span>] &gt; insertValue; j--) &#123;</span><br><span class="line">			arr[j] = arr[j-<span class="number">1</span>]; </span><br><span class="line">		&#125;</span><br><span class="line">		arr[j] = insertValue;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
</search>
